name: Rebuild macOS Runner Images

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      macos_versions:
        description: 'macOS versions to rebuild (comma-separated: 13,14,15)'
        required: false
        default: '13,14,15'
      force_rebuild:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: 'false'
        type: boolean

env:
  PACKER_VERSION: "1.9.4"
  TERRAFORM_VERSION: "1.6.0"
  
jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_rebuild: ${{ steps.check.outputs.should_rebuild }}
      changed_files: ${{ steps.check.outputs.changed_files }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        id: check
        run: |
          # Check if any relevant files have changed in the last 24 hours
          changed_files=$(git diff --name-only HEAD~1 HEAD | grep -E "(bootstrap|packer|\.buildkite/macos-runners)" | head -20)
          
          if [[ -n "$changed_files" ]] || [[ "${{ github.event.inputs.force_rebuild }}" == "true" ]]; then
            echo "should_rebuild=true" >> $GITHUB_OUTPUT
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            echo "$changed_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "should_rebuild=false" >> $GITHUB_OUTPUT
            echo "changed_files=" >> $GITHUB_OUTPUT
          fi

  build-images:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should_rebuild == 'true'
    strategy:
      matrix:
        macos_version: [13, 14, 15]
      fail-fast: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: ${{ env.PACKER_VERSION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Validate Packer configuration
        working-directory: .buildkite/macos-runners/packer
        run: |
          packer validate \
            -var "macos_version=${{ matrix.macos_version }}" \
            -var "orka_endpoint=${{ secrets.ORKA_ENDPOINT }}" \
            -var "orka_auth_token=${{ secrets.ORKA_AUTH_TOKEN }}" \
            macos-base.pkr.hcl

      - name: Build macOS ${{ matrix.macos_version }} image
        working-directory: .buildkite/macos-runners/packer
        run: |
          echo "Building macOS ${{ matrix.macos_version }} image..."
          
          # Set build variables
          export PACKER_LOG=1
          export PACKER_LOG_PATH="./packer-build-macos-${{ matrix.macos_version }}.log"
          
          # Build the image
          packer build \
            -var "macos_version=${{ matrix.macos_version }}" \
            -var "orka_endpoint=${{ secrets.ORKA_ENDPOINT }}" \
            -var "orka_auth_token=${{ secrets.ORKA_AUTH_TOKEN }}" \
            -var "base_image=base-images/macos-${{ matrix.macos_version }}-$([ ${{ matrix.macos_version }} -eq 13 ] && echo 'ventura' || [ ${{ matrix.macos_version }} -eq 14 ] && echo 'sonoma' || echo 'sequoia')" \
            macos-base.pkr.hcl

      - name: Validate built image
        working-directory: .buildkite/macos-runners/packer
        run: |
          echo "Validating built image..."
          
          # Get the latest built image ID
          IMAGE_ID=$(orka image list --output json | jq -r '.[] | select(.name | test("^bun-macos-${{ matrix.macos_version }}-")) | .id' | head -1)
          
          if [ -z "$IMAGE_ID" ]; then
            echo "❌ No image found for macOS ${{ matrix.macos_version }}"
            exit 1
          fi
          
          echo "✅ Found image: $IMAGE_ID"
          
          # Create a test VM to validate the image
          VM_NAME="test-validation-${{ matrix.macos_version }}-$(date +%s)"
          
          echo "Creating test VM: $VM_NAME"
          orka vm create \
            --name "$VM_NAME" \
            --image "$IMAGE_ID" \
            --cpu 4 \
            --memory 8 \
            --wait
          
          # Wait for VM to be ready
          sleep 60
          
          # Get VM IP
          VM_IP=$(orka vm show "$VM_NAME" --output json | jq -r '.ip_address')
          
          echo "Testing VM at IP: $VM_IP"
          
          # Test software installations
          echo "Testing software installations..."
          
          # Test Node.js
          ssh -o StrictHostKeyChecking=no admin@$VM_IP 'node --version' || exit 1
          
          # Test Bun
          ssh -o StrictHostKeyChecking=no admin@$VM_IP 'bun --version' || exit 1
          
          # Test build tools
          ssh -o StrictHostKeyChecking=no admin@$VM_IP 'cmake --version' || exit 1
          ssh -o StrictHostKeyChecking=no admin@$VM_IP 'clang --version' || exit 1
          
          # Test Docker
          ssh -o StrictHostKeyChecking=no admin@$VM_IP 'docker --version' || exit 1
          
          # Test Tailscale
          ssh -o StrictHostKeyChecking=no admin@$VM_IP 'tailscale --version' || exit 1
          
          # Test health endpoint
          ssh -o StrictHostKeyChecking=no admin@$VM_IP 'curl -f http://localhost:8080/health' || exit 1
          
          echo "✅ All software validations passed"
          
          # Clean up test VM
          orka vm delete "$VM_NAME" --force
          
          echo "✅ Image validation completed successfully"

      - name: Run flakiness checks
        working-directory: .buildkite/macos-runners/packer
        run: |
          echo "Running flakiness checks..."
          
          # Get the latest built image ID
          IMAGE_ID=$(orka image list --output json | jq -r '.[] | select(.name | test("^bun-macos-${{ matrix.macos_version }}-")) | .id' | head -1)
          
          # Run multiple test iterations to check for flakiness
          ITERATIONS=3
          PASSED=0
          FAILED=0
          
          for i in $(seq 1 $ITERATIONS); do
            echo "Running flakiness test iteration $i/$ITERATIONS..."
            
            VM_NAME="flakiness-test-${{ matrix.macos_version }}-$i-$(date +%s)"
            
            # Create test VM
            orka vm create \
              --name "$VM_NAME" \
              --image "$IMAGE_ID" \
              --cpu 4 \
              --memory 8 \
              --wait
            
            sleep 30
            
            # Get VM IP
            VM_IP=$(orka vm show "$VM_NAME" --output json | jq -r '.ip_address')
            
            # Run a series of quick tests
            TEST_PASSED=true
            
            # Test 1: Basic command execution
            if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 admin@$VM_IP 'echo "test" > /tmp/test.txt && cat /tmp/test.txt'; then
              echo "❌ Basic command test failed"
              TEST_PASSED=false
            fi
            
            # Test 2: Node.js execution
            if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 admin@$VM_IP 'node -e "console.log(\"Node.js test\")"'; then
              echo "❌ Node.js test failed"
              TEST_PASSED=false
            fi
            
            # Test 3: Bun execution
            if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 admin@$VM_IP 'bun -e "console.log(\"Bun test\")"'; then
              echo "❌ Bun test failed"
              TEST_PASSED=false
            fi
            
            # Test 4: Build tools
            if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 admin@$VM_IP 'clang --version > /tmp/clang_version.txt'; then
              echo "❌ Clang test failed"
              TEST_PASSED=false
            fi
            
            # Test 5: File system operations
            if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 admin@$VM_IP 'mkdir -p /tmp/test_dir && touch /tmp/test_dir/test_file'; then
              echo "❌ File system test failed"
              TEST_PASSED=false
            fi
            
            # Test 6: Process creation
            if ! ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 admin@$VM_IP 'ps aux | grep -v grep | wc -l'; then
              echo "❌ Process test failed"
              TEST_PASSED=false
            fi
            
            # Clean up test VM
            orka vm delete "$VM_NAME" --force
            
            if [ "$TEST_PASSED" = true ]; then
              echo "✅ Iteration $i passed"
              PASSED=$((PASSED + 1))
            else
              echo "❌ Iteration $i failed"
              FAILED=$((FAILED + 1))
            fi
            
            # Short delay between iterations
            sleep 10
          done
          
          echo "Flakiness check results:"
          echo "- Passed: $PASSED/$ITERATIONS"
          echo "- Failed: $FAILED/$ITERATIONS"
          
          # Calculate success rate
          SUCCESS_RATE=$((PASSED * 100 / ITERATIONS))
          echo "- Success rate: $SUCCESS_RATE%"
          
          # Fail if success rate is below 80%
          if [ $SUCCESS_RATE -lt 80 ]; then
            echo "❌ Image is too flaky! Success rate: $SUCCESS_RATE% (minimum: 80%)"
            exit 1
          fi
          
          echo "✅ Flakiness checks passed with $SUCCESS_RATE% success rate"

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: packer-logs-macos-${{ matrix.macos_version }}
          path: .buildkite/macos-runners/packer/packer-build-macos-${{ matrix.macos_version }}.log
          retention-days: 7

      - name: Notify on failure
        if: failure()
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: failure
          title: "macOS ${{ matrix.macos_version }} image build failed"
          description: |
            🔴 **macOS ${{ matrix.macos_version }} image build failed**
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            
            [Check the logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: 0xff0000
          username: "GitHub Actions"

  update-terraform:
    runs-on: ubuntu-latest
    needs: [check-changes, build-images]
    if: needs.check-changes.outputs.should_rebuild == 'true' && needs.build-images.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Initialize Terraform
        working-directory: .buildkite/macos-runners/terraform
        run: |
          terraform init
          terraform workspace select production || terraform workspace new production

      - name: Plan Terraform changes
        working-directory: .buildkite/macos-runners/terraform
        run: |
          terraform plan \
            -var "macstadium_api_key=${{ secrets.MACSTADIUM_API_KEY }}" \
            -var "buildkite_agent_token=${{ secrets.BUILDKITE_AGENT_TOKEN }}" \
            -var "github_token=${{ secrets.GITHUB_TOKEN }}" \
            -out=tfplan

      - name: Apply Terraform changes
        working-directory: .buildkite/macos-runners/terraform
        run: |
          terraform apply -auto-approve tfplan

      - name: Save Terraform outputs
        working-directory: .buildkite/macos-runners/terraform
        run: |
          terraform output -json > terraform-outputs.json

      - name: Upload Terraform outputs
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: .buildkite/macos-runners/terraform/terraform-outputs.json
          retention-days: 30

  cleanup-old-images:
    runs-on: ubuntu-latest
    needs: [check-changes, build-images, update-terraform]
    if: always() && needs.check-changes.outputs.should_rebuild == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install MacStadium CLI
        run: |
          curl -L "https://github.com/macstadium/orka-cli/releases/latest/download/orka-cli-linux-amd64.tar.gz" | tar -xz
          sudo mv orka-cli /usr/local/bin/orka
          chmod +x /usr/local/bin/orka

      - name: Configure MacStadium CLI
        run: |
          orka config set endpoint ${{ secrets.ORKA_ENDPOINT }}
          orka auth token ${{ secrets.ORKA_AUTH_TOKEN }}

      - name: Clean up old images
        run: |
          echo "Cleaning up old images..."
          
          # Get list of all images
          orka image list --output json > images.json
          
          # Find images older than 7 days
          cutoff_date=$(date -d '7 days ago' +%s)
          
          # Parse and delete old images
          jq -r '.[] | select(.name | test("^bun-macos-")) | select(.created_at | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime < '$cutoff_date') | .name' images.json | while read image_name; do
            echo "Deleting old image: $image_name"
            orka image delete "$image_name" || echo "Failed to delete $image_name"
          done

      - name: Clean up old snapshots
        run: |
          echo "Cleaning up old snapshots..."
          
          # Get list of all snapshots
          orka snapshot list --output json > snapshots.json
          
          # Find snapshots older than 7 days
          cutoff_date=$(date -d '7 days ago' +%s)
          
          # Parse and delete old snapshots
          jq -r '.[] | select(.name | test("^bun-macos-")) | select(.created_at | strptime("%Y-%m-%dT%H:%M:%SZ") | mktime < '$cutoff_date') | .name' snapshots.json | while read snapshot_name; do
            echo "Deleting old snapshot: $snapshot_name"
            orka snapshot delete "$snapshot_name" || echo "Failed to delete $snapshot_name"
          done

  health-check:
    runs-on: ubuntu-latest
    needs: [check-changes, build-images, update-terraform]
    if: always() && needs.check-changes.outputs.should_rebuild == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Install MacStadium CLI
        run: |
          curl -L "https://github.com/macstadium/orka-cli/releases/latest/download/orka-cli-linux-amd64.tar.gz" | tar -xz
          sudo mv orka-cli /usr/local/bin/orka
          chmod +x /usr/local/bin/orka

      - name: Configure MacStadium CLI
        run: |
          orka config set endpoint ${{ secrets.ORKA_ENDPOINT }}
          orka auth token ${{ secrets.ORKA_AUTH_TOKEN }}

      - name: Health check VMs
        run: |
          echo "Performing health check on VMs..."
          
          # Get list of running VMs
          orka vm list --output json > vms.json
          
          # Check each VM
          jq -r '.[] | select(.name | test("^bun-runner-")) | select(.status == "running") | "\(.name) \(.ip_address)"' vms.json | while read vm_name vm_ip; do
            echo "Checking VM: $vm_name ($vm_ip)"
            
            # Check if VM is responding to health checks
            if curl -f -s --max-time 30 "http://$vm_ip:8080/health" > /dev/null; then
              echo "✅ $vm_name is healthy"
            else
              echo "❌ $vm_name is not responding to health checks"
            fi
          done

      - name: Check Buildkite agent connectivity
        run: |
          echo "Checking Buildkite agent connectivity..."
          
          # Use Buildkite API to check connected agents
          curl -s -H "Authorization: Bearer ${{ secrets.BUILDKITE_API_TOKEN }}" \
            "https://api.buildkite.com/v2/organizations/${{ secrets.BUILDKITE_ORG }}/agents" | \
            jq -r '.[] | select(.name | test("^bun-runner-")) | "\(.name) \(.connection_state)"' | \
            while read agent_name state; do
              echo "Agent: $agent_name - State: $state"
            done

  notify-success:
    runs-on: ubuntu-latest
    needs: [check-changes, build-images, update-terraform, cleanup-old-images, health-check]
    if: always() && needs.check-changes.outputs.should_rebuild == 'true' && needs.build-images.result == 'success'
    
    steps:
      - name: Notify success
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: success
          title: "macOS runner images rebuilt successfully"
          description: |
            ✅ **macOS runner images rebuilt successfully**
            
            **Repository:** ${{ github.repository }}
            **Branch:** ${{ github.ref }}
            **Commit:** ${{ github.sha }}
            
            **Changes detected in:**
            ${{ needs.check-changes.outputs.changed_files }}
            
            **Images built:** ${{ join(github.event.inputs.macos_versions || '13,14,15', ', ') }}
            
            [Check the deployment](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          color: 0x00ff00
          username: "GitHub Actions"

  notify-skip:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should_rebuild == 'false'
    
    steps:
      - name: Notify skip
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: cancelled
          title: "macOS runner image rebuild skipped"
          description: |
            ℹ️ **macOS runner image rebuild skipped** - no changes detected in the last 24 hours
          color: 0x808080
          username: "GitHub Actions"