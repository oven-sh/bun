/// <reference path="../index.d.ts" />
// Generate stuff for .github/labels.yml && .github/labeler.yml

import { join } from "node:path";
import { getDotTsFiles } from "./utils/getDotTsFiles";

const dotFiles = await getDotTsFiles();
const generateLabels = async() => {
    const labelsFilePath = join(import.meta.dir, "..", ".github", "labels.yml");
    let labels = (await Bun.file(labelsFilePath).text()).split("# Don't touch! Auto generated by scripts/generate.ts")[0];
    
    labels += "# Don't touch! Auto generated by scripts/generate.ts\n";
    for (const file of dotFiles) {
        labels += [
            `- name: 'types:${file.replace('.d.ts', '')}'`,
            `  color: 'FBCA04'`,
        ].join('\n') + "\n";
    }
    
    await Bun.write(labelsFilePath, labels);
}

const generateLabeler = async() => {
    const labelerFilePath = join(import.meta.dir, "..", ".github", "labeler.yml");
    let labeler = "# Don't touch! Auto generated by scripts/generate.ts\n";

    const choreAll: string[] = [];
    for (const file of dotFiles) {
        choreAll.push(`'!${file}'`);
    }

    labeler += [
        "chore:",
        "  - any: ['*']",
        `    all: [${choreAll.join(', ')}]`,
    ].join('\n') + "\n\n";

    for (const file of dotFiles) {
        labeler += [
            `'types:${file.replace('.d.ts', '')}':`,
            `  - '${file}'`
        ].join('\n') + "\n\n";
    }

    await Bun.write(labelerFilePath, labeler);
}

await generateLabels();
await generateLabeler();
