/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#pragma once

#include "JSDOMWrapper.h"

namespace WebCore {

class JSReadableStream : public JSDOMObject {

public:
    using Base = JSDOMObject;
    static JSReadableStream* create(JSC::Structure* structure, JSDOMGlobalObject* globalObject)
    {
        JSReadableStream* ptr = new (NotNull, JSC::allocateCell<JSReadableStream>(globalObject->vm())) JSReadableStream(structure, *globalObject);
        ptr->finishCreation(globalObject->vm());
        return ptr;
    }

    static JSC::JSObject* createPrototype(JSC::VM&, JSDOMGlobalObject&);
    static JSC::JSObject* prototype(JSC::VM&, JSDOMGlobalObject&);
    static void destroy(JSC::JSCell*);

    DECLARE_INFO;

    static JSC::Structure* createStructure(JSC::VM& vm, JSC::JSGlobalObject* globalObject, JSC::JSValue prototype)
    {
        return JSC::Structure::create(vm, globalObject, prototype, JSC::TypeInfo(JSC::ObjectType, StructureFlags), info(), JSC::NonArray);
    }

    static JSC::JSValue getConstructor(JSC::VM&, const JSC::JSGlobalObject*);
    template<typename, JSC::SubspaceAccess mode> static JSC::GCClient::IsoSubspace* subspaceFor(JSC::VM& vm)
    {
        if constexpr (mode == JSC::SubspaceAccess::Concurrently)
            return nullptr;
        return subspaceForImpl(vm);
    }
    static JSC::GCClient::IsoSubspace* subspaceForImpl(JSC::VM& vm);

    JSC::JSValue nativeType()
    {
        if (JSC::JSValue value = this->m_nativeType.get())
            return value;
        return JSC::jsNumber(0);
    }
    JSC::JSValue disturbed()
    {
        if (JSC::JSValue value = this->m_disturbed.get())
            return value;
        return JSC::jsBoolean(false);
    }
    JSC::JSValue nativePtr()
    {
        return this->m_nativePtr.get();
        if (JSC::JSValue value = this->m_nativePtr.get())
            return value;
        return JSC::jsNumber(0);
    }

    void setNativePtr(JSC::JSGlobalObject* lexicalGlobalObject, JSC::JSValue value)
    {
        this->m_nativePtr.set(JSC::getVM(lexicalGlobalObject), this, value);
    }

    void setNativeType(JSC::JSGlobalObject* lexicalGlobalObject, JSC::JSValue value)
    {
        this->m_nativeType.set(JSC::getVM(lexicalGlobalObject), this, value);
    }

    void setDisturbed(JSC::JSGlobalObject* lexicalGlobalObject, JSC::JSValue value)
    {
        this->m_disturbed.set(JSC::getVM(lexicalGlobalObject), this, value);
    }

protected:
    mutable JSC::WriteBarrier<JSC::Unknown> m_nativePtr;
    mutable JSC::WriteBarrier<JSC::Unknown> m_nativeType;
    mutable JSC::WriteBarrier<JSC::Unknown> m_disturbed;

    JSReadableStream(JSC::Structure*, JSDOMGlobalObject&);

    void finishCreation(JSC::VM&);
};

} // namespace WebCore
