var o=globalThis[Symbol.for("Bun.lazy")]("bun:jsc"),p=o.callerSourceOrigin,t=o.describe,a=o.describeArray,e=t,f=a,h=o.drainMicrotasks,u=o.edenGC,C=o.fullGC,S=o.gcAndSweep,d=o.getRandomSeed,g=o.heapSize,k=o.heapStats,l=o.startSamplingProfiler,m=o.samplingProfilerStackTraces,n=o.isRope,q=o.memoryUsage,v=o.noInline,w=o.noFTL,x=o.noOSRExitFuzzing,z=o.numberOfDFGCompiles,B=o.optimizeNextInvocation,E=o.releaseWeakRefs,F=o.reoptimizationRetryCount,G=o.setRandomSeed,H=o.startRemoteDebugger,I=o.totalCompileTime,J=o.getProtectedObjects,K=o.generateHeapSnapshotForDebugging,L=o.profile,P=o,M=o.setTimeZone,N=M;export{I as totalCompileTime,l as startSamplingProfiler,H as startRemoteDebugger,N as setTimezone,M as setTimeZone,G as setRandomSeed,m as samplingProfilerStackTraces,F as reoptimizationRetryCount,E as releaseWeakRefs,L as profile,B as optimizeNextInvocation,z as numberOfDFGCompiles,x as noOSRExitFuzzing,v as noInline,w as noFTL,q as memoryUsage,a as jscDescribeArray,t as jscDescribe,n as isRope,k as heapStats,g as heapSize,d as getRandomSeed,J as getProtectedObjects,K as generateHeapSnapshotForDebugging,S as gcAndSweep,C as fullGC,u as edenGC,h as drainMicrotasks,f as describeArray,e as describe,P as default,p as callerSourceOrigin};
