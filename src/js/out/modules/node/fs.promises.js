var e=(J)=>{return import.meta.require(J)};function Q(J,z={}){const K=[];if(J instanceof URL)throw new TypeError("Watch URLs are not supported yet");else if(Buffer.isBuffer(J))J=J.toString();else if(typeof J!=="string")throw new TypeError("Expected path to be a string or Buffer");let A=null;if(typeof z==="string")z={encoding:z};const G=P(),H=S.watch(J,z||{},(B,D)=>{if(G.push({eventType:B,filename:D}),A){const L=A;A=null,L()}});return{[Symbol.asyncIterator](){let B=!1;return{async next(){while(!B){let D;while(D=G.shift()){if(D.eventType==="close")return B=!0,{value:void 0,done:!0};if(D.eventType==="error")throw B=!0,D.filename;return{value:D,done:!1}}const{promise:L,resolve:N}=Promise.withResolvers();A=N,await L}return{value:void 0,done:!0}},return(){if(!B){if(H.close(),B=!0,A){const D=A;A=null,D()}}return{value:void 0,done:!0}}}}}}var{createFIFO:P}=globalThis[Symbol.for("Bun.lazy")]("primordials"),S=Bun.fs(),M="::bunternal::",C={[M]:(J)=>{return async function(...z){return await 1,J.apply(S,z)}}}[M],U=C(S.accessSync),V=C(S.appendFileSync),X=C(S.closeSync),Y=C(S.copyFileSync),Z=C(S.existsSync),_=C(S.chownSync),$=C(S.chmodSync),g=C(S.fchmodSync),I=C(S.fchownSync),O=C(S.fstatSync),T=C(S.fsyncSync),q=C(S.ftruncateSync),W=C(S.futimesSync),j=C(S.lchmodSync),E=C(S.lchownSync),k=C(S.linkSync),w=S.lstat.bind(S),x=C(S.mkdirSync),F=C(S.mkdtempSync),h=C(S.openSync),R=C(S.readSync),b=C(S.writeSync),u=S.readdir.bind(S),d=S.readFile.bind(S),c=C(S.writeFileSync),v=C(S.readlinkSync),a=C(S.realpathSync),y=C(S.renameSync),l=S.stat.bind(S),p=C(S.symlinkSync),m=C(S.truncateSync),n=C(S.unlinkSync),t=C(S.utimesSync),r=C(S.lutimesSync),o=C(S.rmSync),i=C(S.rmdirSync),f=(J,z,K)=>{return new Promise((A,G)=>{try{var H=S.writevSync(J,z,K)}catch(B){G(B);return}A({bytesWritten:H,buffers:z})})},s=(J,z,K)=>{return new Promise((A,G)=>{try{var H=S.readvSync(J,z,K)}catch(B){G(B);return}A({bytesRead:H,buffers:z})})},CS={access:U,appendFile:V,close:X,copyFile:Y,exists:Z,chown:_,chmod:$,fchmod:g,fchown:I,fstat:O,fsync:T,ftruncate:q,futimes:W,lchmod:j,lchown:E,link:k,lstat:w,mkdir:x,mkdtemp:F,open:h,read:R,write:b,readdir:u,readFile:d,writeFile:c,readlink:v,realpath:a,rename:y,stat:l,symlink:p,truncate:m,unlink:n,utimes:t,lutimes:r,rm:o,rmdir:i,watch:Q,writev:f,readv:s,constants,[Symbol.for("CommonJS")]:0};export{f as writev,c as writeFile,b as write,Q as watch,t as utimes,n as unlink,m as truncate,p as symlink,l as stat,i as rmdir,o as rm,y as rename,a as realpath,s as readv,v as readlink,u as readdir,d as readFile,R as read,h as open,F as mkdtemp,x as mkdir,r as lutimes,w as lstat,k as link,E as lchown,j as lchmod,W as futimes,q as ftruncate,T as fsync,O as fstat,I as fchown,g as fchmod,Z as exists,CS as default,Y as copyFile,X as close,_ as chown,$ as chmod,V as appendFile,U as access};
