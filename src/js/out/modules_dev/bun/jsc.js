var jsc = globalThis[Symbol.for("Bun.lazy")]("bun:jsc"), callerSourceOrigin = jsc.callerSourceOrigin, jscDescribe = jsc.describe, jscDescribeArray = jsc.describeArray, describe = jscDescribe, describeArray = jscDescribeArray, drainMicrotasks = jsc.drainMicrotasks, edenGC = jsc.edenGC, fullGC = jsc.fullGC, gcAndSweep = jsc.gcAndSweep, getRandomSeed = jsc.getRandomSeed, heapSize = jsc.heapSize, heapStats = jsc.heapStats, startSamplingProfiler = jsc.startSamplingProfiler, samplingProfilerStackTraces = jsc.samplingProfilerStackTraces, isRope = jsc.isRope, memoryUsage = jsc.memoryUsage, noInline = jsc.noInline, noFTL = jsc.noFTL, noOSRExitFuzzing = jsc.noOSRExitFuzzing, numberOfDFGCompiles = jsc.numberOfDFGCompiles, optimizeNextInvocation = jsc.optimizeNextInvocation, releaseWeakRefs = jsc.releaseWeakRefs, reoptimizationRetryCount = jsc.reoptimizationRetryCount, setRandomSeed = jsc.setRandomSeed, startRemoteDebugger = jsc.startRemoteDebugger, totalCompileTime = jsc.totalCompileTime, getProtectedObjects = jsc.getProtectedObjects, generateHeapSnapshotForDebugging = jsc.generateHeapSnapshotForDebugging, profile = jsc.profile, jsc_default = jsc, setTimeZone = jsc.setTimeZone, setTimezone = setTimeZone;
export {
  totalCompileTime,
  startSamplingProfiler,
  startRemoteDebugger,
  setTimezone,
  setTimeZone,
  setRandomSeed,
  samplingProfilerStackTraces,
  reoptimizationRetryCount,
  releaseWeakRefs,
  profile,
  optimizeNextInvocation,
  numberOfDFGCompiles,
  noOSRExitFuzzing,
  noInline,
  noFTL,
  memoryUsage,
  jscDescribeArray,
  jscDescribe,
  isRope,
  heapStats,
  heapSize,
  getRandomSeed,
  getProtectedObjects,
  generateHeapSnapshotForDebugging,
  gcAndSweep,
  fullGC,
  edenGC,
  drainMicrotasks,
  describeArray,
  describe,
  jsc_default as default,
  callerSourceOrigin
};

//# debugId=6DA2178F4F59EAB164756e2164756e21
