{
  "version": 3,
  "sources": ["src/js/node/fs.js"],
  "sourcesContent": [
    "// Hardcoded module \"node:fs\"\nvar { direct, isPromise, isCallable } = import.meta.primordials;\nvar promises = import.meta.require(\"node:fs/promises\");\n\nvar { Readable, NativeWritable, _getNativeReadableStreamPrototype, eos: eos_ } = import.meta.require(\"node:stream\");\nvar NativeReadable = _getNativeReadableStreamPrototype(2, Readable); // 2 means native type is a file here\n\nvar fs = Bun.fs();\nvar debug = process.env.DEBUG ? console.log : () => {};\nexport var access = function access(...args) {\n    callbackify(fs.accessSync, args);\n  },\n  appendFile = function appendFile(...args) {\n    callbackify(fs.appendFileSync, args);\n  },\n  close = function close(...args) {\n    callbackify(fs.closeSync, args);\n  },\n  rm = function rm(...args) {\n    callbackify(fs.rmSync, args);\n  },\n  rmdir = function rmdir(...args) {\n    callbackify(fs.rmdirSync, args);\n  },\n  copyFile = function copyFile(...args) {\n    callbackify(fs.copyFileSync, args);\n  },\n  exists = function exists(...args) {\n    callbackify(fs.existsSync, args);\n  },\n  chown = function chown(...args) {\n    callbackify(fs.chownSync, args);\n  },\n  chmod = function chmod(...args) {\n    callbackify(fs.chmodSync, args);\n  },\n  fchmod = function fchmod(...args) {\n    callbackify(fs.fchmodSync, args);\n  },\n  fchown = function fchown(...args) {\n    callbackify(fs.fchownSync, args);\n  },\n  fstat = function fstat(...args) {\n    callbackify(fs.fstatSync, args);\n  },\n  fsync = function fsync(...args) {\n    callbackify(fs.fsyncSync, args);\n  },\n  ftruncate = function ftruncate(...args) {\n    callbackify(fs.ftruncateSync, args);\n  },\n  futimes = function futimes(...args) {\n    callbackify(fs.futimesSync, args);\n  },\n  lchmod = function lchmod(...args) {\n    callbackify(fs.lchmodSync, args);\n  },\n  lchown = function lchown(...args) {\n    callbackify(fs.lchownSync, args);\n  },\n  link = function link(...args) {\n    callbackify(fs.linkSync, args);\n  },\n  lstat = function lstat(...args) {\n    callbackify(fs.lstatSync, args);\n  },\n  mkdir = function mkdir(...args) {\n    callbackify(fs.mkdirSync, args);\n  },\n  mkdtemp = function mkdtemp(...args) {\n    callbackify(fs.mkdtempSync, args);\n  },\n  open = function open(...args) {\n    callbackify(fs.openSync, args);\n  },\n  read = function read(...args) {\n    callbackify(fs.readSync, args);\n  },\n  write = function write(...args) {\n    callbackify(fs.writeSync, args);\n  },\n  readdir = function readdir(...args) {\n    callbackify(fs.readdirSync, args);\n  },\n  readFile = function readFile(...args) {\n    callbackify(fs.readFileSync, args);\n  },\n  writeFile = function writeFile(...args) {\n    callbackify(fs.writeFileSync, args);\n  },\n  readlink = function readlink(...args) {\n    callbackify(fs.readlinkSync, args);\n  },\n  realpath = function realpath(...args) {\n    callbackify(fs.realpathSync, args);\n  },\n  rename = function rename(...args) {\n    callbackify(fs.renameSync, args);\n  },\n  stat = function stat(...args) {\n    callbackify(fs.statSync, args);\n  },\n  symlink = function symlink(...args) {\n    callbackify(fs.symlinkSync, args);\n  },\n  truncate = function truncate(...args) {\n    callbackify(fs.truncateSync, args);\n  },\n  unlink = function unlink(...args) {\n    callbackify(fs.unlinkSync, args);\n  },\n  utimes = function utimes(...args) {\n    callbackify(fs.utimesSync, args);\n  },\n  lutimes = function lutimes(...args) {\n    callbackify(fs.lutimesSync, args);\n  },\n  accessSync = fs.accessSync.bind(fs),\n  appendFileSync = fs.appendFileSync.bind(fs),\n  closeSync = fs.closeSync.bind(fs),\n  copyFileSync = fs.copyFileSync.bind(fs),\n  existsSync = fs.existsSync.bind(fs),\n  chownSync = fs.chownSync.bind(fs),\n  chmodSync = fs.chmodSync.bind(fs),\n  fchmodSync = fs.fchmodSync.bind(fs),\n  fchownSync = fs.fchownSync.bind(fs),\n  fstatSync = fs.fstatSync.bind(fs),\n  fsyncSync = fs.fsyncSync.bind(fs),\n  ftruncateSync = fs.ftruncateSync.bind(fs),\n  futimesSync = fs.futimesSync.bind(fs),\n  lchmodSync = fs.lchmodSync.bind(fs),\n  lchownSync = fs.lchownSync.bind(fs),\n  linkSync = fs.linkSync.bind(fs),\n  lstatSync = fs.lstatSync.bind(fs),\n  mkdirSync = fs.mkdirSync.bind(fs),\n  mkdtempSync = fs.mkdtempSync.bind(fs),\n  openSync = fs.openSync.bind(fs),\n  readSync = fs.readSync.bind(fs),\n  writeSync = fs.writeSync.bind(fs),\n  readdirSync = fs.readdirSync.bind(fs),\n  readFileSync = fs.readFileSync.bind(fs),\n  writeFileSync = fs.writeFileSync.bind(fs),\n  readlinkSync = fs.readlinkSync.bind(fs),\n  realpathSync = fs.realpathSync.bind(fs),\n  renameSync = fs.renameSync.bind(fs),\n  statSync = fs.statSync.bind(fs),\n  symlinkSync = fs.symlinkSync.bind(fs),\n  truncateSync = fs.truncateSync.bind(fs),\n  unlinkSync = fs.unlinkSync.bind(fs),\n  utimesSync = fs.utimesSync.bind(fs),\n  lutimesSync = fs.lutimesSync.bind(fs),\n  rmSync = fs.rmSync.bind(fs),\n  rmdirSync = fs.rmdirSync.bind(fs),\n  Dirent = fs.Dirent,\n  Stats = fs.Stats,\n  promises = import.meta.require(\"node:fs/promises\");\n\nfunction callbackify(fsFunction, args) {\n  try {\n    const result = fsFunction.apply(fs, args.slice(0, args.length - 1));\n    const callback = args[args.length - 1];\n    if (typeof callback === \"function\") {\n      queueMicrotask(() => callback(null, result));\n    }\n  } catch (e) {\n    const callback = args[args.length - 1];\n    if (typeof callback === \"function\") {\n      queueMicrotask(() => callback(e));\n    }\n  }\n}\n\n// Results from Object.keys() in Node 1,\n// fd\n// path\n// flags\n// mode\n// start\n// end\n// pos\n// bytesRead\n// _readableState\n// _events\n// _eventsCount\n// _maxListener\nvar readStreamPathFastPathSymbol = Symbol.for(\"Bun.Node.readStreamPathFastPath\");\nconst readStreamSymbol = Symbol.for(\"Bun.NodeReadStream\");\nconst readStreamPathOrFdSymbol = Symbol.for(\"Bun.NodeReadStreamPathOrFd\");\nconst writeStreamSymbol = Symbol.for(\"Bun.NodeWriteStream\");\nvar writeStreamPathFastPathSymbol = Symbol.for(\"Bun.NodeWriteStreamFastPath\");\nvar writeStreamPathFastPathCallSymbol = Symbol.for(\"Bun.NodeWriteStreamFastPathCall\");\nvar kIoDone = Symbol.for(\"kIoDone\");\n\nvar defaultReadStreamOptions = {\n  file: undefined,\n  fd: undefined,\n  flags: \"r\",\n  encoding: undefined,\n  mode: 0o666,\n  autoClose: true,\n  emitClose: true,\n  start: 0,\n  end: Infinity,\n  highWaterMark: 64 * 1024,\n  fs: {\n    read,\n    open: (path, flags, mode, cb) => {\n      var fd;\n      try {\n        fd = openSync(path, flags, mode);\n      } catch (e) {\n        cb(e);\n        return;\n      }\n\n      cb(null, fd);\n    },\n    openSync,\n    close,\n  },\n  autoDestroy: true,\n};\n\nvar ReadStreamClass;\nexport var ReadStream = (function (InternalReadStream) {\n  ReadStreamClass = InternalReadStream;\n  Object.defineProperty(ReadStreamClass.prototype, Symbol.toStringTag, {\n    value: \"ReadStream\",\n    enumerable: false,\n  });\n\n  return Object.defineProperty(\n    function ReadStream(path, options) {\n      return new InternalReadStream(path, options);\n    },\n    Symbol.hasInstance,\n    {\n      value(instance) {\n        return instance instanceof InternalReadStream;\n      },\n    },\n  );\n})(\n  class ReadStream extends NativeReadable {\n    constructor(pathOrFd, options = defaultReadStreamOptions) {\n      if (typeof options !== \"object\" || !options) {\n        throw new TypeError(\"Expected options to be an object\");\n      }\n\n      var {\n        flags = defaultReadStreamOptions.flags,\n        encoding = defaultReadStreamOptions.encoding,\n        mode = defaultReadStreamOptions.mode,\n        autoClose = defaultReadStreamOptions.autoClose,\n        emitClose = defaultReadStreamOptions.emitClose,\n        start = defaultReadStreamOptions.start,\n        end = defaultReadStreamOptions.end,\n        autoDestroy = defaultReadStreamOptions.autoClose,\n        fs = defaultReadStreamOptions.fs,\n        highWaterMark = defaultReadStreamOptions.highWaterMark,\n      } = options;\n\n      if (pathOrFd?.constructor?.name === \"URL\") {\n        pathOrFd = Bun.fileURLToPath(pathOrFd);\n      }\n\n      // This is kinda hacky but we create a temporary object to assign props that we will later pull into the `this` context after we call super\n      var tempThis = {};\n      if (typeof pathOrFd === \"string\") {\n        if (pathOrFd.startsWith(\"file://\")) {\n          pathOrFd = Bun.fileURLToPath(pathOrFd);\n        }\n        if (pathOrFd.length === 0) {\n          throw new TypeError(\"Expected path to be a non-empty string\");\n        }\n        tempThis.path = tempThis.file = tempThis[readStreamPathOrFdSymbol] = pathOrFd;\n      } else if (typeof pathOrFd === \"number\") {\n        pathOrFd |= 0;\n        if (pathOrFd < 0) {\n          throw new TypeError(\"Expected fd to be a positive integer\");\n        }\n        tempThis.fd = tempThis[readStreamPathOrFdSymbol] = pathOrFd;\n\n        tempThis.autoClose = false;\n      } else {\n        throw new TypeError(\"Expected a path or file descriptor\");\n      }\n\n      // If fd not open for this file, open it\n      if (!tempThis.fd) {\n        // NOTE: this fs is local to constructor, from options\n        tempThis.fd = fs.openSync(pathOrFd, flags, mode);\n      }\n      // Get FileRef from fd\n      var fileRef = Bun.file(tempThis.fd);\n\n      // Get the stream controller\n      // We need the pointer to the underlying stream controller for the NativeReadable\n      var stream = fileRef.stream();\n      var native = direct(stream);\n      if (!native) {\n        debug(\"no native readable stream\");\n        throw new Error(\"no native readable stream\");\n      }\n      var { stream: ptr } = native;\n\n      super(ptr, {\n        ...options,\n        encoding,\n        autoDestroy,\n        autoClose,\n        emitClose,\n        highWaterMark,\n      });\n\n      // Assign the tempThis props to this\n      Object.assign(this, tempThis);\n      this.#fileRef = fileRef;\n\n      this.end = end;\n      this._read = this.#internalRead;\n      this.start = start;\n      this.flags = flags;\n      this.mode = mode;\n      this.emitClose = emitClose;\n\n      this[readStreamPathFastPathSymbol] =\n        start === 0 &&\n        end === Infinity &&\n        autoClose &&\n        fs === defaultReadStreamOptions.fs &&\n        // is it an encoding which we don't need to decode?\n        (encoding === \"buffer\" ||\n          encoding === \"binary\" ||\n          encoding == null ||\n          encoding === \"utf-8\" ||\n          encoding === \"utf8\");\n      this._readableState.autoClose = autoDestroy = autoClose;\n      this._readableState.highWaterMark = highWaterMark;\n\n      if (start !== undefined) {\n        this.pos = start;\n      }\n    }\n    #fileRef;\n    #fs;\n    file;\n    path;\n    fd = null;\n    flags;\n    mode;\n    start;\n    end;\n    pos;\n    bytesRead = 0;\n    #fileSize = -1;\n    _read;\n\n    [readStreamSymbol] = true;\n    [readStreamPathOrFdSymbol];\n    [readStreamPathFastPathSymbol];\n\n    _construct(callback) {\n      if (super._construct) {\n        super._construct(callback);\n      } else {\n        callback();\n      }\n      this.emit(\"open\", this.fd);\n      this.emit(\"ready\");\n    }\n\n    _destroy(err, cb) {\n      super._destroy(err, cb);\n      try {\n        var fd = this.fd;\n        this[readStreamPathFastPathSymbol] = false;\n\n        if (!fd) {\n          cb(err);\n        } else {\n          this.#fs.close(fd, er => {\n            cb(er || err);\n          });\n          this.fd = null;\n        }\n      } catch (e) {\n        throw e;\n      }\n    }\n\n    close(cb) {\n      if (typeof cb === \"function\") eos_()(this, cb);\n      this.destroy();\n    }\n\n    push(chunk) {\n      // Is it even possible for this to be less than 1?\n      var bytesRead = chunk?.length ?? 0;\n      if (bytesRead > 0) {\n        this.bytesRead += bytesRead;\n        var currPos = this.pos;\n        // Handle case of going through bytes before pos if bytesRead is less than pos\n        // If pos is undefined, we are reading through the whole file\n        // Otherwise we started from somewhere in the middle of the file\n        if (currPos !== undefined) {\n          // At this point we still haven't hit our `start` point\n          // We should discard this chunk and exit\n          if (this.bytesRead < currPos) {\n            return true;\n          }\n          // At this point, bytes read is greater than our starting position\n          // If the current position is still the starting position, that means\n          // this is the first chunk where we care about the bytes read\n          // and we need to subtract the bytes read from the start position (n) and slice the last n bytes\n          if (currPos === this.start) {\n            var n = this.bytesRead - currPos;\n            chunk = chunk.slice(-n);\n            var [_, ...rest] = arguments;\n            this.pos = this.bytesRead;\n            if (this.end && this.bytesRead >= this.end) {\n              chunk = chunk.slice(0, this.end - this.start);\n            }\n            return super.push(chunk, ...rest);\n          }\n          var end = this.end;\n          // This is multi-chunk read case where we go passed the end of the what we want to read in the last chunk\n          if (end && this.bytesRead >= end) {\n            chunk = chunk.slice(0, end - currPos);\n            var [_, ...rest] = arguments;\n            this.pos = this.bytesRead;\n            return super.push(chunk, ...rest);\n          }\n          this.pos = this.bytesRead;\n        }\n      }\n\n      return super.push(...arguments);\n    }\n\n    // #\n\n    // n should be the the highwatermark passed from Readable.read when calling internal _read (_read is set to this private fn in this class)\n    #internalRead(n) {\n      // pos is the current position in the file\n      // by default, if a start value is provided, pos starts at this.start\n      var { pos, end, bytesRead, fd, encoding } = this;\n\n      n =\n        pos !== undefined // if there is a pos, then we are reading from that specific position in the file\n          ? Math.min(end - pos + 1, n) // takes smaller of length of the rest of the file to read minus the cursor position, or the highwatermark\n          : Math.min(end - bytesRead + 1, n); // takes the smaller of the length of the rest of the file from the bytes that we have marked read, or the highwatermark\n\n      debug(\"n @ fs.ReadStream.#internalRead, after clamp\", n);\n\n      // If n is 0 or less, then we read all the file, push null to stream, ending it\n      if (n <= 0) {\n        this.push(null);\n        return;\n      }\n\n      // At this point, n is the lesser of the length of the rest of the file to read or the highwatermark\n      // Which means n is the maximum number of bytes to read\n\n      // Basically if we don't know the file size yet, then check it\n      // Then if n is bigger than fileSize, set n to be fileSize\n      // This is a fast path to avoid allocating more than the file size for a small file (is this respected by native stream though)\n      if (this.#fileSize === -1 && bytesRead === 0 && pos === undefined) {\n        var stat = fstatSync(fd);\n        this.#fileSize = stat.size;\n        if (this.#fileSize > 0 && n > this.#fileSize) {\n          n = this.#fileSize + 1;\n        }\n        debug(\"fileSize\", this.#fileSize);\n      }\n\n      // At this point, we know the file size and how much we want to read of the file\n      this[kIoDone] = false;\n      var res = super._read(n);\n      debug(\"res -- undefined? why?\", res);\n      if (isPromise(res)) {\n        var then = res?.then;\n        if (then && isCallable(then)) {\n          then(\n            () => {\n              this[kIoDone] = true;\n              // Tell ._destroy() that it's safe to close the fd now.\n              if (this.destroyed) {\n                this.emit(kIoDone);\n              }\n            },\n            er => {\n              this[kIoDone] = true;\n              this.#errorOrDestroy(er);\n            },\n          );\n        }\n      } else {\n        this[kIoDone] = true;\n        if (this.destroyed) {\n          this.emit(kIoDone);\n          this.#errorOrDestroy(new Error(\"ERR_STREAM_PREMATURE_CLOSE\"));\n        }\n      }\n    }\n\n    #errorOrDestroy(err, sync = null) {\n      var {\n        _readableState: r = { destroyed: false, autoDestroy: false },\n        _writableState: w = { destroyed: false, autoDestroy: false },\n      } = this;\n\n      if (w?.destroyed || r?.destroyed) {\n        return this;\n      }\n      if (r?.autoDestroy || w?.autoDestroy) this.destroy(err);\n      else if (err) {\n        this.emit(\"error\", err);\n      }\n    }\n\n    pause() {\n      this[readStreamPathFastPathSymbol] = false;\n      return super.pause();\n    }\n\n    resume() {\n      this[readStreamPathFastPathSymbol] = false;\n      return super.resume();\n    }\n\n    unshift(...args) {\n      this[readStreamPathFastPathSymbol] = false;\n      return super.unshift(...args);\n    }\n\n    pipe(dest, pipeOpts) {\n      if (this[readStreamPathFastPathSymbol] && (pipeOpts?.end ?? true) && this._readableState?.pipes?.length === 0) {\n        if (writeStreamPathFastPathSymbol in dest && dest[writeStreamPathFastPathSymbol]) {\n          if (dest[writeStreamPathFastPathCallSymbol](this, pipeOpts)) {\n            return this;\n          }\n        }\n      }\n\n      this[readStreamPathFastPathSymbol] = false;\n      return super.pipe(dest, pipeOpts);\n    }\n  },\n);\n\nexport function createReadStream(path, options) {\n  return new ReadStream(path, options);\n}\n\nvar defaultWriteStreamOptions = {\n  fd: null,\n  start: undefined,\n  pos: undefined,\n  encoding: undefined,\n  flags: \"w\",\n  mode: 0o666,\n  fs: {\n    write,\n    close,\n    open,\n    openSync,\n  },\n};\n\nvar WriteStreamClass;\nexport var WriteStream = (function (InternalWriteStream) {\n  WriteStreamClass = InternalWriteStream;\n  Object.defineProperty(WriteStreamClass.prototype, Symbol.toStringTag, {\n    value: \"WritesStream\",\n    enumerable: false,\n  });\n\n  return Object.defineProperty(\n    function WriteStream(options) {\n      return new InternalWriteStream(options);\n    },\n    Symbol.hasInstance,\n    {\n      value(instance) {\n        return instance instanceof InternalWriteStream;\n      },\n    },\n  );\n})(\n  class WriteStream extends NativeWritable {\n    constructor(path, options = defaultWriteStreamOptions) {\n      if (!options) {\n        throw new TypeError(\"Expected options to be an object\");\n      }\n\n      var {\n        fs = defaultWriteStreamOptions.fs,\n        start = defaultWriteStreamOptions.start,\n        flags = defaultWriteStreamOptions.flags,\n        mode = defaultWriteStreamOptions.mode,\n        autoClose = true,\n        emitClose = false,\n        autoDestroy = autoClose,\n        encoding = defaultWriteStreamOptions.encoding,\n        fd = defaultWriteStreamOptions.fd,\n        pos = defaultWriteStreamOptions.pos,\n      } = options;\n\n      var tempThis = {};\n      if (typeof path === \"string\") {\n        if (path.length === 0) {\n          throw new TypeError(\"Expected a non-empty path\");\n        }\n\n        if (path.startsWith(\"file:\")) {\n          path = Bun.fileURLToPath(path);\n        }\n\n        tempThis.path = path;\n        tempThis.fd = null;\n        tempThis[writeStreamPathFastPathSymbol] =\n          autoClose &&\n          (start === undefined || start === 0) &&\n          fs.write === defaultWriteStreamOptions.fs.write &&\n          fs.close === defaultWriteStreamOptions.fs.close;\n      } else {\n        tempThis.fd = fd;\n        tempThis[writeStreamPathFastPathSymbol] = false;\n      }\n\n      if (!tempThis.fd) {\n        tempThis.fd = fs.openSync(path, flags, mode);\n      }\n\n      super(tempThis.fd, {\n        ...options,\n        decodeStrings: false,\n        autoDestroy,\n        emitClose,\n        fd: tempThis,\n      });\n      Object.assign(this, tempThis);\n\n      if (typeof fs?.write !== \"function\") {\n        throw new TypeError(\"Expected fs.write to be a function\");\n      }\n\n      if (typeof fs?.close !== \"function\") {\n        throw new TypeError(\"Expected fs.close to be a function\");\n      }\n\n      if (typeof fs?.open !== \"function\") {\n        throw new TypeError(\"Expected fs.open to be a function\");\n      }\n\n      if (typeof path === \"object\" && path) {\n        if (path instanceof URL) {\n          path = Bun.fileURLToPath(path);\n        }\n      }\n\n      if (typeof path !== \"string\" && typeof fd !== \"number\") {\n        throw new TypeError(\"Expected a path or file descriptor\");\n      }\n\n      this.start = start;\n      this.#fs = fs;\n      this.flags = flags;\n      this.mode = mode;\n\n      if (this.start !== undefined) {\n        this.pos = this.start;\n      }\n\n      if (encoding !== defaultWriteStreamOptions.encoding) {\n        this.setDefaultEncoding(encoding);\n        if (encoding !== \"buffer\" && encoding !== \"utf8\" && encoding !== \"utf-8\" && encoding !== \"binary\") {\n          this[writeStreamPathFastPathSymbol] = false;\n        }\n      }\n    }\n\n    get autoClose() {\n      return this._writableState.autoDestroy;\n    }\n\n    set autoClose(val) {\n      this._writableState.autoDestroy = val;\n    }\n\n    destroySoon = this.end; // TODO: what is this for?\n\n    // noop, node has deprecated this\n    open() {}\n\n    path;\n    fd;\n    flags;\n    mode;\n    #fs;\n    bytesWritten = 0;\n    pos;\n    [writeStreamPathFastPathSymbol];\n    [writeStreamSymbol] = true;\n    start;\n\n    [writeStreamPathFastPathCallSymbol](readStream, pipeOpts) {\n      if (!this[writeStreamPathFastPathSymbol]) {\n        return false;\n      }\n\n      if (this.fd !== null) {\n        this[writeStreamPathFastPathSymbol] = false;\n        return false;\n      }\n\n      this[kIoDone] = false;\n      readStream[kIoDone] = false;\n      return Bun.write(this[writeStreamPathFastPathSymbol], readStream[readStreamPathOrFdSymbol]).then(\n        bytesWritten => {\n          readStream[kIoDone] = this[kIoDone] = true;\n          this.bytesWritten += bytesWritten;\n          readStream.bytesRead += bytesWritten;\n          this.end();\n          readStream.close();\n        },\n        err => {\n          readStream[kIoDone] = this[kIoDone] = true;\n          this.#errorOrDestroy(err);\n          readStream.emit(\"error\", err);\n        },\n      );\n    }\n\n    isBunFastPathEnabled() {\n      return this[writeStreamPathFastPathSymbol];\n    }\n\n    disableBunFastPath() {\n      this[writeStreamPathFastPathSymbol] = false;\n    }\n\n    #handleWrite(er, bytes) {\n      if (er) {\n        return this.#errorOrDestroy(er);\n      }\n\n      this.bytesWritten += bytes;\n    }\n\n    #internalClose(err, cb) {\n      this[writeStreamPathFastPathSymbol] = false;\n      var fd = this.fd;\n      this.#fs.close(fd, er => {\n        this.fd = null;\n        cb(err || er);\n      });\n    }\n\n    _construct(callback) {\n      if (typeof this.fd === \"number\") {\n        callback();\n        return;\n      }\n\n      callback();\n      this.emit(\"open\", this.fd);\n      this.emit(\"ready\");\n    }\n\n    _destroy(err, cb) {\n      if (this.fd === null) {\n        return cb(err);\n      }\n\n      if (this[kIoDone]) {\n        this.once(kIoDone, () => this.#internalClose(err, cb));\n        return;\n      }\n\n      this.#internalClose(err, cb);\n    }\n\n    [kIoDone] = false;\n\n    close(cb) {\n      if (cb) {\n        if (this.closed) {\n          process.nextTick(cb);\n          return;\n        }\n        this.on(\"close\", cb);\n      }\n\n      // If we are not autoClosing, we should call\n      // destroy on 'finish'.\n      if (!this.autoClose) {\n        this.on(\"finish\", this.destroy);\n      }\n\n      // We use end() instead of destroy() because of\n      // https://github.com/nodejs/node/issues/2006\n      this.end();\n    }\n\n    write(chunk, encoding = this._writableState.defaultEncoding, cb) {\n      this[writeStreamPathFastPathSymbol] = false;\n      if (typeof chunk === \"string\") {\n        chunk = Buffer.from(chunk, encoding);\n      }\n\n      // TODO: Replace this when something like lseek is available\n      var native = this.pos === undefined;\n      this[kIoDone] = true;\n      return super.write(\n        chunk,\n        encoding,\n        native\n          ? (err, bytes) => {\n              this[kIoDone] = false;\n              this.#handleWrite(err, bytes);\n              this.emit(kIoDone);\n              if (cb) !err ? cb() : cb(err);\n            }\n          : () => {},\n        native,\n      );\n    }\n\n    #internalWriteSlow(chunk, encoding, cb) {\n      this.#fs.write(this.fd, chunk, 0, chunk.length, this.pos, (err, bytes) => {\n        this[kIoDone] = false;\n        this.#handleWrite(err, bytes);\n        this.emit(kIoDone);\n\n        !err ? cb() : cb(err);\n      });\n    }\n\n    end(chunk, encoding, cb) {\n      var native = this.pos === undefined;\n      return super.end(chunk, encoding, cb, native);\n    }\n\n    _write = this.#internalWriteSlow;\n    _writev = undefined;\n\n    get pending() {\n      return this.fd === null;\n    }\n\n    _destroy(err, cb) {\n      this.close(err, cb);\n    }\n\n    #errorOrDestroy(err) {\n      var {\n        _readableState: r = { destroyed: false, autoDestroy: false },\n        _writableState: w = { destroyed: false, autoDestroy: false },\n      } = this;\n\n      if (w?.destroyed || r?.destroyed) {\n        return this;\n      }\n      if (r?.autoDestroy || w?.autoDestroy) this.destroy(err);\n      else if (err) {\n        this.emit(\"error\", err);\n      }\n    }\n  },\n);\n\nexport function createWriteStream(path, options) {\n  // const WriteStream = getLazyWriteStream();\n  return new WriteStream(path, options);\n}\n\n// NOTE: This was too smart and doesn't actually work\n// export var WriteStream = Object.defineProperty(\n//   function WriteStream(path, options) {\n//     var _InternalWriteStream = getLazyWriteStream();\n//     return new _InternalWriteStream(path, options);\n//   },\n//   Symbol.hasInstance,\n//   { value: (instance) => instance[writeStreamSymbol] === true },\n// );\n\n// export var ReadStream = Object.defineProperty(\n//   function ReadStream(path, options) {\n//     var _InternalReadStream = getLazyReadStream();\n//     return new _InternalReadStream(path, options);\n//   },\n//   Symbol.hasInstance,\n//   { value: (instance) => instance[readStreamSymbol] === true },\n// );\n\nObject.defineProperties(fs, {\n  createReadStream: {\n    value: createReadStream,\n  },\n  createWriteStream: {\n    value: createWriteStream,\n  },\n  ReadStream: {\n    value: ReadStream,\n  },\n  WriteStream: {\n    value: WriteStream,\n  },\n  // ReadStream: {\n  //   get: () => getLazyReadStream(),\n  // },\n  // WriteStream: {\n  //   get: () => getLazyWriteStream(),\n  // },\n});\n\n// lol\nrealpath.native = realpath;\nrealpathSync.native = realpathSync;\n\nexport default {\n  [Symbol.for(\"CommonJS\")]: 0,\n  access,\n  accessSync,\n  appendFile,\n  appendFileSync,\n  chmod,\n  chmodSync,\n  chown,\n  chownSync,\n  close,\n  closeSync,\n  constants: promises.constants,\n  copyFile,\n  copyFileSync,\n  createReadStream,\n  createWriteStream,\n  Dirent,\n  exists,\n  existsSync,\n  fchmod,\n  fchmodSync,\n  fchown,\n  fchownSync,\n  fstat,\n  fstatSync,\n  fsync,\n  fsyncSync,\n  ftruncate,\n  ftruncateSync,\n  futimes,\n  futimesSync,\n  lchmod,\n  lchmodSync,\n  lchown,\n  lchownSync,\n  link,\n  linkSync,\n  lstat,\n  lstatSync,\n  lutimes,\n  lutimesSync,\n  mkdir,\n  mkdirSync,\n  mkdtemp,\n  mkdtempSync,\n  open,\n  openSync,\n  promises,\n  read,\n  readFile,\n  readFileSync,\n  readSync,\n  readdir,\n  readdirSync,\n  readlink,\n  readlinkSync,\n  realpath,\n  realpathSync,\n  rename,\n  renameSync,\n  rm,\n  rmSync,\n  rmdir,\n  rmdirSync,\n  stat,\n  statSync,\n  Stats,\n  symlink,\n  symlinkSync,\n  truncate,\n  truncateSync,\n  unlink,\n  unlinkSync,\n  utimes,\n  utimesSync,\n  write,\n  writeFile,\n  writeFileSync,\n  writeSync,\n  WriteStream,\n  ReadStream,\n\n  [Symbol.for(\"::bunternal::\")]: {\n    ReadStreamClass,\n    WriteStreamClass,\n  },\n  // get WriteStream() {\n  //   return getLazyWriteStream();\n  // },\n  // get ReadStream() {\n  //   return getLazyReadStream();\n  // },\n};\n"
  ],
  "mappings": ";;A//////DA6JA,IAAS,sBAAW,CAAC,YAAY,MAAM;AACrC,MAAI;AACF,UAAM,SAAS,WAAW,MAAM,IAAI,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC,CAAC,GAC5D,WAAW,KAAK,KAAK,SAAS;AACpC,eAAW,aAAa;AACtB,qBAAe,MAAM,SAAS,MAAM,MAAM,CAAC;AAAA,WAEtC,GAAP;AACA,UAAM,WAAW,KAAK,KAAK,SAAS;AACpC,eAAW,aAAa;AACtB,qBAAe,MAAM,SAAS,CAAC,CAAC;AAAA;AAAA;AAgY/B,SAAS,gBAAgB,CAAC,MAAM,SAAS;AAC9C,SAAO,IAAI,WAAW,MAAM,OAAO;AAAA;AAiU9B,SAAS,iBAAiB,CAAC,MAAM,SAAS;AAE/C,SAAO,IAAI,YAAY,MAAM,OAAO;AAAA;AA12BtC,MAAM,QAAQ,WAAW,eAAe,YAAY,aAChD,WAAW,YAAY,QAAQ,kBAAkB,KAE/C,UAAU,gBAAgB,mCAAmC,KAAK,SAAS,YAAY,QAAQ,aAAa,GAC9G,iBAAiB,kCAAkC,GAAG,QAAQ,GAE9D,KAAK,IAAI,GAAG,GACZ,QAAQ,QAAQ,IAAI,QAAQ,QAAQ,MAAM,MAAM;AAAA,GACzC,kBAAkB,OAAM,IAAI,MAAM;AACzC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,sBAAsB,WAAU,IAAI,MAAM;AACxC,cAAY,GAAG,gBAAgB,IAAI;AAAA,GAErC,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,cAAc,GAAE,IAAI,MAAM;AACxB,cAAY,GAAG,QAAQ,IAAI;AAAA,GAE7B,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,oBAAoB,SAAQ,IAAI,MAAM;AACpC,cAAY,GAAG,cAAc,IAAI;AAAA,GAEnC,kBAAkB,OAAM,IAAI,MAAM;AAChC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,kBAAkB,OAAM,IAAI,MAAM;AAChC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,kBAAkB,OAAM,IAAI,MAAM;AAChC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,qBAAqB,UAAS,IAAI,MAAM;AACtC,cAAY,GAAG,eAAe,IAAI;AAAA,GAEpC,mBAAmB,QAAO,IAAI,MAAM;AAClC,cAAY,GAAG,aAAa,IAAI;AAAA,GAElC,kBAAkB,OAAM,IAAI,MAAM;AAChC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,kBAAkB,OAAM,IAAI,MAAM;AAChC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,gBAAgB,KAAI,IAAI,MAAM;AAC5B,cAAY,GAAG,UAAU,IAAI;AAAA,GAE/B,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,mBAAmB,QAAO,IAAI,MAAM;AAClC,cAAY,GAAG,aAAa,IAAI;AAAA,GAElC,gBAAgB,KAAI,IAAI,MAAM;AAC5B,cAAY,GAAG,UAAU,IAAI;AAAA,GAE/B,gBAAgB,KAAI,IAAI,MAAM;AAC5B,cAAY,GAAG,UAAU,IAAI;AAAA,GAE/B,iBAAiB,MAAK,IAAI,MAAM;AAC9B,cAAY,GAAG,WAAW,IAAI;AAAA,GAEhC,mBAAmB,QAAO,IAAI,MAAM;AAClC,cAAY,GAAG,aAAa,IAAI;AAAA,GAElC,oBAAoB,SAAQ,IAAI,MAAM;AACpC,cAAY,GAAG,cAAc,IAAI;AAAA,GAEnC,qBAAqB,UAAS,IAAI,MAAM;AACtC,cAAY,GAAG,eAAe,IAAI;AAAA,GAEpC,oBAAoB,SAAQ,IAAI,MAAM;AACpC,cAAY,GAAG,cAAc,IAAI;AAAA,GAEnC,oBAAoB,SAAQ,IAAI,MAAM;AACpC,cAAY,GAAG,cAAc,IAAI;AAAA,GAEnC,kBAAkB,OAAM,IAAI,MAAM;AAChC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,gBAAgB,KAAI,IAAI,MAAM;AAC5B,cAAY,GAAG,UAAU,IAAI;AAAA,GAE/B,mBAAmB,QAAO,IAAI,MAAM;AAClC,cAAY,GAAG,aAAa,IAAI;AAAA,GAElC,oBAAoB,SAAQ,IAAI,MAAM;AACpC,cAAY,GAAG,cAAc,IAAI;AAAA,GAEnC,kBAAkB,OAAM,IAAI,MAAM;AAChC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,kBAAkB,OAAM,IAAI,MAAM;AAChC,cAAY,GAAG,YAAY,IAAI;AAAA,GAEjC,mBAAmB,QAAO,IAAI,MAAM;AAClC,cAAY,GAAG,aAAa,IAAI;AAAA,GAElC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,iBAAiB,GAAG,eAAe,KAAK,EAAE,GAC1C,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,eAAe,GAAG,aAAa,KAAK,EAAE,GACtC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,gBAAgB,GAAG,cAAc,KAAK,EAAE,GACxC,cAAc,GAAG,YAAY,KAAK,EAAE,GACpC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,WAAW,GAAG,SAAS,KAAK,EAAE,GAC9B,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,cAAc,GAAG,YAAY,KAAK,EAAE,GACpC,WAAW,GAAG,SAAS,KAAK,EAAE,GAC9B,WAAW,GAAG,SAAS,KAAK,EAAE,GAC9B,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,cAAc,GAAG,YAAY,KAAK,EAAE,GACpC,eAAe,GAAG,aAAa,KAAK,EAAE,GACtC,gBAAgB,GAAG,cAAc,KAAK,EAAE,GACxC,eAAe,GAAG,aAAa,KAAK,EAAE,GACtC,eAAe,GAAG,aAAa,KAAK,EAAE,GACtC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,WAAW,GAAG,SAAS,KAAK,EAAE,GAC9B,cAAc,GAAG,YAAY,KAAK,EAAE,GACpC,eAAe,GAAG,aAAa,KAAK,EAAE,GACtC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,aAAa,GAAG,WAAW,KAAK,EAAE,GAClC,cAAc,GAAG,YAAY,KAAK,EAAE,GACpC,SAAS,GAAG,OAAO,KAAK,EAAE,GAC1B,YAAY,GAAG,UAAU,KAAK,EAAE,GAChC,SAAS,GAAG,QACZ,QAAQ,GAAG,OACX,WAAW,YAAY,QAAQ,kBAAkB,GA8B/C,+BAA+B,OAAO,IAAI,iCAAiC,GACzE,mBAAmB,OAAO,IAAI,oBAAoB,GAClD,2BAA2B,OAAO,IAAI,4BAA4B,GAClE,oBAAoB,OAAO,IAAI,qBAAqB,GACtD,gCAAgC,OAAO,IAAI,6BAA6B,GACxE,oCAAoC,OAAO,IAAI,iCAAiC,GAChF,UAAU,OAAO,IAAI,SAAS,GAE9B,2BAA2B;AAAA,EAC7B,MAAM;AAAA,EACN,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,UAAU;AAAA,EACV,MAAM;AAAA,EACN,WAAW;AAAA,EACX,WAAW;AAAA,EACX,OAAO;AAAA,EACP,KAAK;AAAA,EACL,eAAe;AAAA,EACf,IAAI;AAAA,IACF;AAAA,IACA,MAAM,CAAC,MAAM,OAAO,MAAM,OAAO;AAC/B,UAAI;AACJ,UAAI;AACF,aAAK,SAAS,MAAM,OAAO,IAAI;AAAA,eACxB,GAAP;AACA,WAAG,CAAC;AACJ;AAAA;AAGF,SAAG,MAAM,EAAE;AAAA;AAAA,IAEb;AAAA,IACA;AAAA,EACF;AAAA,EACA,aAAa;AACf,GAEI,iBACO,qBAAuB,CAAC,oBAAoB;AAOrD,SANA,kBAAkB,oBAClB,OAAO,eAAe,gBAAgB,WAAW,OAAO,aAAa;AAAA,IACnE,OAAO;AAAA,IACP,YAAY;AAAA,EACd,CAAC,GAEM,OAAO,wBACH,UAAU,CAAC,MAAM,SAAS;AACjC,WAAO,IAAI,mBAAmB,MAAM,OAAO;AAAA,KAE7C,OAAO,aACP;AAAA,IACE,KAAK,CAAC,UAAU;AACd,aAAO,oBAAoB;AAAA;AAAA,EAE/B,CACF;AAAA,EAEA,MAAM,oBAAmB,eAAe;AAAA,EACtC,WAAW,CAAC,UAAU,UAAU,0BAA0B;AACxD,eAAW,YAAY,aAAa;AAClC,YAAM,IAAI,UAAU,kCAAkC;AAGxD;AAAA,MACE,QAAQ,yBAAyB;AAAA,MACjC,WAAW,yBAAyB;AAAA,MACpC,OAAO,yBAAyB;AAAA,MAChC,YAAY,yBAAyB;AAAA,MACrC,YAAY,yBAAyB;AAAA,MACrC,QAAQ,yBAAyB;AAAA,MACjC,MAAM,yBAAyB;AAAA,MAC/B,cAAc,yBAAyB;AAAA,MACvC,UAAK,yBAAyB;AAAA,MAC9B,gBAAgB,yBAAyB;AAAA,QACvC;AAEJ,QAAI,UAAU,aAAa,SAAS;AAClC,iBAAW,IAAI,cAAc,QAAQ;AAIvC,QAAI,WAAW,CAAC;AAChB,eAAW,aAAa,UAAU;AAChC,UAAI,SAAS,WAAW,SAAS;AAC/B,mBAAW,IAAI,cAAc,QAAQ;AAEvC,UAAI,SAAS,WAAW;AACtB,cAAM,IAAI,UAAU,wCAAwC;AAE9D,eAAS,OAAO,SAAS,OAAO,SAAS,4BAA4B;AAAA,sBACrD,aAAa,UAAU;AAEvC,UADA,YAAY,GACR,WAAW;AACb,cAAM,IAAI,UAAU,sCAAsC;AAE5D,eAAS,KAAK,SAAS,4BAA4B,UAEnD,SAAS,YAAY;AAAA;AAErB,YAAM,IAAI,UAAU,oCAAoC;AAI1D,SAAK,SAAS;AAEZ,eAAS,KAAK,IAAG,SAAS,UAAU,OAAO,IAAI;AAGjD,QAAI,UAAU,IAAI,KAAK,SAAS,EAAE,GAI9B,SAAS,QAAQ,OAAO,GACxB,SAAS,OAAO,MAAM;AAC1B,SAAK;AAEH,YADA,MAAM,2BAA2B,GAC3B,IAAI,MAAM,2BAA2B;AAE7C,UAAM,QAAQ,QAAQ;AAEtB,UAAM,KAAK;AAAA,SACN;AAAA,MACH;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AA2BD,QAxBA,OAAO,OAAO,MAAM,QAAQ,GAC5B,KAAK,WAAW,SAEhB,KAAK,MAAM,KACX,KAAK,QAAQ,KAAK,eAClB,KAAK,QAAQ,OACb,KAAK,QAAQ,OACb,KAAK,OAAO,MACZ,KAAK,YAAY,WAEjB,KAAK,gCACH,UAAU,KACV,QAAQ,YACR,aACA,QAAO,yBAAyB,OAE/B,aAAa,YACZ,aAAa,YACb,YAAY,QACZ,aAAa,WACb,aAAa,SACjB,KAAK,eAAe,YAAY,cAAc,WAC9C,KAAK,eAAe,gBAAgB,eAEhC,UAAU;AACZ,WAAK,MAAM;AAAA;AAAA,EAGf;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,KAAK;AAAA,EACL;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AAAA,EACZ,aAAY;AAAA,EACZ;AAAA,GAEC,oBAAoB;AAAA,GACpB;AAAA,GACA;AAAA,EAED,UAAU,CAAC,UAAU;AACnB,QAAI,MAAM;AACR,YAAM,WAAW,QAAQ;AAAA;AAEzB,eAAS;AAEX,SAAK,KAAK,QAAQ,KAAK,EAAE,GACzB,KAAK,KAAK,OAAO;AAAA;AAAA,EAGnB,QAAQ,CAAC,KAAK,IAAI;AAChB,UAAM,SAAS,KAAK,EAAE;AACtB,QAAI;AACF,UAAI,KAAK,KAAK;AAGd,UAFA,KAAK,gCAAgC,KAEhC;AACH,WAAG,GAAG;AAAA;AAEN,aAAK,IAAI,MAAM,IAAI,QAAM;AACvB,aAAG,MAAM,GAAG;AAAA,SACb,GACD,KAAK,KAAK;AAAA,aAEL,GAAP;AACA,YAAM;AAAA;AAAA;AAAA,EAIV,KAAK,CAAC,IAAI;AACR,eAAW,OAAO;AAAY,WAAK,EAAE,MAAM,EAAE;AAC7C,SAAK,QAAQ;AAAA;AAAA,EAGf,IAAI,CAAC,OAAO;AAEV,QAAI,YAAY,OAAO,UAAU;AACjC,QAAI,YAAY,GAAG;AACjB,WAAK,aAAa;AAClB,UAAI,UAAU,KAAK;AAInB,UAAI,YAAY,QAAW;AAGzB,YAAI,KAAK,YAAY;AACnB,iBAAO;AAMT,YAAI,YAAY,KAAK,OAAO;AAC1B,cAAI,IAAI,KAAK,YAAY;AACzB,kBAAQ,MAAM,OAAO,CAAC;AACtB,eAAK,MAAM,QAAQ;AAEnB,cADA,KAAK,MAAM,KAAK,WACZ,KAAK,OAAO,KAAK,aAAa,KAAK;AACrC,oBAAQ,MAAM,MAAM,GAAG,KAAK,MAAM,KAAK,KAAK;AAE9C,iBAAO,MAAM,KAAK,OAAO,GAAG,IAAI;AAAA;AAElC,YAAI,MAAM,KAAK;AAEf,YAAI,OAAO,KAAK,aAAa,KAAK;AAChC,kBAAQ,MAAM,MAAM,GAAG,MAAM,OAAO;AACpC,eAAK,MAAM,QAAQ;AAEnB,iBADA,KAAK,MAAM,KAAK,WACT,MAAM,KAAK,OAAO,GAAG,IAAI;AAAA;AAElC,aAAK,MAAM,KAAK;AAAA;AAAA;AAIpB,WAAO,MAAM,KAAK,GAAG,SAAS;AAAA;AAAA,EAMhC,aAAa,CAAC,GAAG;AAGf,UAAM,KAAK,KAAK,WAAW,IAAI,aAAa;AAU5C,QARA,IACE,QAAQ,SACJ,KAAK,IAAI,MAAM,MAAM,GAAG,CAAC,IACzB,KAAK,IAAI,MAAM,YAAY,GAAG,CAAC,GAErC,MAAM,gDAAgD,CAAC,GAGnD,KAAK,GAAG;AACV,WAAK,KAAK,IAAI;AACd;AAAA;AASF,QAAI,KAAK,eAAc,KAAM,cAAc,KAAK,QAAQ,QAAW;AACjE,UAAI,QAAO,UAAU,EAAE;AAEvB,UADA,KAAK,YAAY,MAAK,MAClB,KAAK,YAAY,KAAK,IAAI,KAAK;AACjC,YAAI,KAAK,YAAY;AAEvB,YAAM,YAAY,KAAK,SAAS;AAAA;AAIlC,SAAK,WAAW;AAChB,QAAI,MAAM,MAAM,MAAM,CAAC;AAEvB,QADA,MAAM,0BAA0B,GAAG,GAC/B,UAAU,GAAG,GAAG;AAClB,UAAI,OAAO,KAAK;AAChB,UAAI,QAAQ,WAAW,IAAI;AACzB,aACE,MAAM;AAGJ,cAFA,KAAK,WAAW,IAEZ,KAAK;AACP,iBAAK,KAAK,OAAO;AAAA,WAGrB,QAAM;AACJ,eAAK,WAAW,IAChB,KAAK,gBAAgB,EAAE;AAAA,SAE3B;AAAA,eAGF,KAAK,WAAW,IACZ,KAAK;AACP,WAAK,KAAK,OAAO,GACjB,KAAK,gBAAgB,IAAI,MAAM,4BAA4B,CAAC;AAAA;AAAA,EAKlE,eAAe,CAAC,KAAK,OAAO,MAAM;AAChC;AAAA,MACE,gBAAgB,IAAI,EAAE,WAAW,IAAO,aAAa,GAAM;AAAA,MAC3D,gBAAgB,IAAI,EAAE,WAAW,IAAO,aAAa,GAAM;AAAA,QACzD;AAEJ,QAAI,GAAG,aAAa,GAAG;AACrB,aAAO;AAET,QAAI,GAAG,eAAe,GAAG;AAAa,WAAK,QAAQ,GAAG;AAAA,aAC7C;AACP,WAAK,KAAK,SAAS,GAAG;AAAA;AAAA,EAI1B,KAAK,GAAG;AAEN,WADA,KAAK,gCAAgC,IAC9B,MAAM,MAAM;AAAA;AAAA,EAGrB,MAAM,GAAG;AAEP,WADA,KAAK,gCAAgC,IAC9B,MAAM,OAAO;AAAA;AAAA,EAGtB,OAAO,IAAI,MAAM;AAEf,WADA,KAAK,gCAAgC,IAC9B,MAAM,QAAQ,GAAG,IAAI;AAAA;AAAA,EAG9B,IAAI,CAAC,MAAM,UAAU;AACnB,QAAI,KAAK,kCAAkC,UAAU,OAAO,OAAS,KAAK,gBAAgB,OAAO,WAAW;AAC1G,WAAI,iCAAiC,SAAQ,KAAK;AAChD,YAAI,KAAK,mCAAmC,MAAM,QAAQ;AACxD,iBAAO;AAAA;AAAA;AAMb,WADA,KAAK,gCAAgC,IAC9B,MAAM,KAAK,MAAM,QAAQ;AAAA;AAEpC,CACF,GAMI,4BAA4B;AAAA,EAC9B,IAAI;AAAA,EACJ,OAAO;AAAA,EACP,KAAK;AAAA,EACL,UAAU;AAAA,EACV,OAAO;AAAA,EACP,MAAM;AAAA,EACN,IAAI;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF,GAEI,kBACO,sBAAwB,CAAC,qBAAqB;AAOvD,SANA,mBAAmB,qBACnB,OAAO,eAAe,iBAAiB,WAAW,OAAO,aAAa;AAAA,IACpE,OAAO;AAAA,IACP,YAAY;AAAA,EACd,CAAC,GAEM,OAAO,wBACH,WAAW,CAAC,SAAS;AAC5B,WAAO,IAAI,oBAAoB,OAAO;AAAA,KAExC,OAAO,aACP;AAAA,IACE,KAAK,CAAC,UAAU;AACd,aAAO,oBAAoB;AAAA;AAAA,EAE/B,CACF;AAAA,EAEA,MAAM,qBAAoB,eAAe;AAAA,EACvC,WAAW,CAAC,MAAM,UAAU,2BAA2B;AACrD,SAAK;AACH,YAAM,IAAI,UAAU,kCAAkC;AAGxD;AAAA,MACE,UAAK,0BAA0B;AAAA,MAC/B,QAAQ,0BAA0B;AAAA,MAClC,QAAQ,0BAA0B;AAAA,MAClC,OAAO,0BAA0B;AAAA,MACjC,YAAY;AAAA,MACZ,YAAY;AAAA,MACZ,cAAc;AAAA,MACd,WAAW,0BAA0B;AAAA,MACrC,KAAK,0BAA0B;AAAA,MAC/B,MAAM,0BAA0B;AAAA,QAC9B,SAEA,WAAW,CAAC;AAChB,eAAW,SAAS,UAAU;AAC5B,UAAI,KAAK,WAAW;AAClB,cAAM,IAAI,UAAU,2BAA2B;AAGjD,UAAI,KAAK,WAAW,OAAO;AACzB,eAAO,IAAI,cAAc,IAAI;AAG/B,eAAS,OAAO,MAChB,SAAS,KAAK,MACd,SAAS,iCACP,cACC,UAAU,UAAa,UAAU,MAClC,IAAG,UAAU,0BAA0B,GAAG,SAC1C,IAAG,UAAU,0BAA0B,GAAG;AAAA;AAE5C,eAAS,KAAK,IACd,SAAS,iCAAiC;AAG5C,SAAK,SAAS;AACZ,eAAS,KAAK,IAAG,SAAS,MAAM,OAAO,IAAI;AAG7C,UAAM,SAAS,IAAI;AAAA,SACd;AAAA,MACH,eAAe;AAAA,MACf;AAAA,MACA;AAAA,MACA,IAAI;AAAA,IACN,CAAC;AAGD,QAFA,OAAO,OAAO,MAAM,QAAQ,UAEjB,KAAI,UAAU;AACvB,YAAM,IAAI,UAAU,oCAAoC;AAG1D,eAAW,KAAI,UAAU;AACvB,YAAM,IAAI,UAAU,oCAAoC;AAG1D,eAAW,KAAI,SAAS;AACtB,YAAM,IAAI,UAAU,mCAAmC;AAGzD,eAAW,SAAS,YAAY;AAC9B,UAAI,gBAAgB;AAClB,eAAO,IAAI,cAAc,IAAI;AAAA;AAIjC,eAAW,SAAS,mBAAmB,OAAO;AAC5C,YAAM,IAAI,UAAU,oCAAoC;AAQ1D,QALA,KAAK,QAAQ,OACb,KAAK,MAAM,KACX,KAAK,QAAQ,OACb,KAAK,OAAO,MAER,KAAK,UAAU;AACjB,WAAK,MAAM,KAAK;AAGlB,QAAI,aAAa,0BAA0B;AAEzC,UADA,KAAK,mBAAmB,QAAQ,GAC5B,aAAa,YAAY,aAAa,UAAU,aAAa,WAAW,aAAa;AACvF,aAAK,iCAAiC;AAAA;AAAA;AAAA,MAKxC,SAAS,GAAG;AACd,WAAO,KAAK,eAAe;AAAA;AAAA,MAGzB,SAAS,CAAC,KAAK;AACjB,SAAK,eAAe,cAAc;AAAA;AAAA,EAGpC,cAAc,KAAK;AAAA,EAGnB,IAAI,GAAG;AAAA;AAAA,EAEP;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAe;AAAA,EACf;AAAA,GACC;AAAA,GACA,qBAAqB;AAAA,EACtB;AAAA,GAEC,kCAAkC,CAAC,YAAY,UAAU;AACxD,SAAK,KAAK;AACR,aAAO;AAGT,QAAI,KAAK,OAAO;AAEd,aADA,KAAK,iCAAiC,IAC/B;AAKT,WAFA,KAAK,WAAW,IAChB,WAAW,WAAW,IACf,IAAI,MAAM,KAAK,gCAAgC,WAAW,yBAAyB,EAAE,KAC1F,kBAAgB;AACd,iBAAW,WAAW,KAAK,WAAW,IACtC,KAAK,gBAAgB,cACrB,WAAW,aAAa,cACxB,KAAK,IAAI,GACT,WAAW,MAAM;AAAA,OAEnB,SAAO;AACL,iBAAW,WAAW,KAAK,WAAW,IACtC,KAAK,gBAAgB,GAAG,GACxB,WAAW,KAAK,SAAS,GAAG;AAAA,KAEhC;AAAA;AAAA,EAGF,oBAAoB,GAAG;AACrB,WAAO,KAAK;AAAA;AAAA,EAGd,kBAAkB,GAAG;AACnB,SAAK,iCAAiC;AAAA;AAAA,EAGxC,YAAY,CAAC,IAAI,OAAO;AACtB,QAAI;AACF,aAAO,KAAK,gBAAgB,EAAE;AAGhC,SAAK,gBAAgB;AAAA;AAAA,EAGvB,cAAc,CAAC,KAAK,IAAI;AACtB,SAAK,iCAAiC;AACtC,QAAI,KAAK,KAAK;AACd,SAAK,IAAI,MAAM,IAAI,QAAM;AACvB,WAAK,KAAK,MACV,GAAG,OAAO,EAAE;AAAA,KACb;AAAA;AAAA,EAGH,UAAU,CAAC,UAAU;AACnB,eAAW,KAAK,OAAO,UAAU;AAC/B,eAAS;AACT;AAAA;AAGF,aAAS,GACT,KAAK,KAAK,QAAQ,KAAK,EAAE,GACzB,KAAK,KAAK,OAAO;AAAA;AAAA,EAGnB,QAAQ,CAAC,KAAK,IAAI;AAChB,QAAI,KAAK,OAAO;AACd,aAAO,GAAG,GAAG;AAGf,QAAI,KAAK,UAAU;AACjB,WAAK,KAAK,SAAS,MAAM,KAAK,eAAe,KAAK,EAAE,CAAC;AACrD;AAAA;AAGF,SAAK,eAAe,KAAK,EAAE;AAAA;AAAA,GAG5B,WAAW;AAAA,EAEZ,KAAK,CAAC,IAAI;AACR,QAAI,IAAI;AACN,UAAI,KAAK,QAAQ;AACf,gBAAQ,SAAS,EAAE;AACnB;AAAA;AAEF,WAAK,GAAG,SAAS,EAAE;AAAA;AAKrB,SAAK,KAAK;AACR,WAAK,GAAG,UAAU,KAAK,OAAO;AAKhC,SAAK,IAAI;AAAA;AAAA,EAGX,KAAK,CAAC,OAAO,WAAW,KAAK,eAAe,iBAAiB,IAAI;AAE/D,QADA,KAAK,iCAAiC,WAC3B,UAAU;AACnB,cAAQ,OAAO,KAAK,OAAO,QAAQ;AAIrC,QAAI,SAAS,KAAK,QAAQ;AAE1B,WADA,KAAK,WAAW,IACT,MAAM,MACX,OACA,UACA,SACI,CAAC,KAAK,UAAU;AAId,UAHA,KAAK,WAAW,IAChB,KAAK,aAAa,KAAK,KAAK,GAC5B,KAAK,KAAK,OAAO,GACb;AAAI,SAAC,MAAM,GAAG,IAAI,GAAG,GAAG;AAAA,QAE9B,MAAM;AAAA,OACV,MACF;AAAA;AAAA,EAGF,kBAAkB,CAAC,OAAO,UAAU,IAAI;AACtC,SAAK,IAAI,MAAM,KAAK,IAAI,OAAO,GAAG,MAAM,QAAQ,KAAK,KAAK,CAAC,KAAK,UAAU;AACxE,WAAK,WAAW,IAChB,KAAK,aAAa,KAAK,KAAK,GAC5B,KAAK,KAAK,OAAO,IAEhB,MAAM,GAAG,IAAI,GAAG,GAAG;AAAA,KACrB;AAAA;AAAA,EAGH,GAAG,CAAC,OAAO,UAAU,IAAI;AACvB,QAAI,SAAS,KAAK,QAAQ;AAC1B,WAAO,MAAM,IAAI,OAAO,UAAU,IAAI,MAAM;AAAA;AAAA,EAG9C,SAAS,KAAK;AAAA,EACd,UAAU;AAAA,MAEN,OAAO,GAAG;AACZ,WAAO,KAAK,OAAO;AAAA;AAAA,EAGrB,QAAQ,CAAC,KAAK,IAAI;AAChB,SAAK,MAAM,KAAK,EAAE;AAAA;AAAA,EAGpB,eAAe,CAAC,KAAK;AACnB;AAAA,MACE,gBAAgB,IAAI,EAAE,WAAW,IAAO,aAAa,GAAM;AAAA,MAC3D,gBAAgB,IAAI,EAAE,WAAW,IAAO,aAAa,GAAM;AAAA,QACzD;AAEJ,QAAI,GAAG,aAAa,GAAG;AACrB,aAAO;AAET,QAAI,GAAG,eAAe,GAAG;AAAa,WAAK,QAAQ,GAAG;AAAA,aAC7C;AACP,WAAK,KAAK,SAAS,GAAG;AAAA;AAG5B,CACF;AA0BA,OAAO,iBAAiB,IAAI;AAAA,EAC1B,kBAAkB;AAAA,IAChB,OAAO;AAAA,EACT;AAAA,EACA,mBAAmB;AAAA,IACjB,OAAO;AAAA,EACT;AAAA,EACA,YAAY;AAAA,IACV,OAAO;AAAA,EACT;AAAA,EACA,aAAa;AAAA,IACX,OAAO;AAAA,EACT;AAOF,CAAC;AAGD,SAAS,SAAS;AAClB,aAAa,SAAS;AAEtB,IAHgB;AAAA,GAIb,OAAO,IAAI,UAAU,IAAI;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAW,SAAS;AAAA,EACpeAAe,IAAI;AAAA,IAC7B;AAAA,IACA;AAAA,EACF;AAOF;",
  "debugId": "C689C46EB67EB38664756e2164756e21",
  "names": []
}