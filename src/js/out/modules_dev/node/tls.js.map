{
  "version": 3,
  "sources": ["src/js/node/tls.js"],
  "sourcesContent": [
    "// Hardcoded module \"node:tls\"\nimport { isTypedArray } from \"util/types\";\n\nfunction parseCertString() {\n  throwNotImplemented(\"Not implemented\");\n}\n\nfunction isValidTLSArray(obj) {\n  if (typeof obj === \"string\" || isTypedArray(obj) || obj instanceof ArrayBuffer || obj instanceof Blob) return true;\n  if (Array.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      if (typeof obj !== \"string\" && !isTypedArray(obj) && !(obj instanceof ArrayBuffer) && !(obj instanceof Blob))\n        return false;\n    }\n    return true;\n  }\n}\n\nvar InternalSecureContext = class SecureContext {\n  context;\n\n  constructor(options) {\n    const context = {};\n    if (options) {\n      let key = options.key;\n      if (key) {\n        if (!isValidTLSArray(key)) {\n          throw new TypeError(\n            \"key argument must be an string, Buffer, TypedArray, BunFile or an array containing string, Buffer, TypedArray or BunFile\",\n          );\n        }\n        this.key = key;\n      }\n      let cert = options.cert;\n      if (cert) {\n        if (!isValidTLSArray(cert)) {\n          throw new TypeError(\n            \"cert argument must be an string, Buffer, TypedArray, BunFile or an array containing string, Buffer, TypedArray or BunFile\",\n          );\n        }\n        this.cert = cert;\n      }\n\n      let ca = options.ca;\n      if (ca) {\n        if (!isValidTLSArray(ca)) {\n          throw new TypeError(\n            \"ca argument must be an string, Buffer, TypedArray, BunFile or an array containing string, Buffer, TypedArray or BunFile\",\n          );\n        }\n        this.ca = ca;\n      }\n\n      let passphrase = options.passphrase;\n      if (passphrase && typeof passphrase !== \"string\") {\n        throw new TypeError(\"passphrase argument must be an string\");\n      }\n      this.passphrase = passphrase;\n\n      let servername = options.servername;\n      if (servername && typeof servername !== \"string\") {\n        throw new TypeError(\"servername argument must be an string\");\n      }\n      this.servername = servername;\n\n      let secureOptions = options.secureOptions || 0;\n      if (secureOptions && typeof secureOptions !== \"number\") {\n        throw new TypeError(\"secureOptions argument must be an number\");\n      }\n      this.secureOptions = secureOptions;\n    }\n    this.context = context;\n  }\n};\n\nfunction SecureContext(options) {\n  return new InternalSecureContext(options);\n}\n\nfunction createSecureContext(options) {\n  return new SecureContext(options);\n}\n\nconst { [Symbol.for(\"::bunternal::\")]: InternalTCPSocket, Server: NetServer } = import.meta.require(\"net\");\n\nconst buntls = Symbol.for(\"::buntls::\");\n\nvar SocketClass;\nconst TLSSocket = (function (InternalTLSSocket) {\n  SocketClass = InternalTLSSocket;\n  Object.defineProperty(SocketClass.prototype, Symbol.toStringTag, {\n    value: \"TLSSocket\",\n    enumerable: false,\n  });\n\n  return Object.defineProperty(\n    function Socket(options) {\n      return new InternalTLSSocket(options);\n    },\n    Symbol.hasInstance,\n    {\n      value(instance) {\n        return instance instanceof InternalTLSSocket;\n      },\n    },\n  );\n})(\n  class TLSSocket extends InternalTCPSocket {\n    #secureContext;\n    constructor(options) {\n      super(options);\n      this.#secureContext = options.secureContext || createSecureContext(options);\n      this.authorized = false;\n      this.secureConnecting = true;\n      this._secureEstablished = false;\n      this._securePending = true;\n    }\n\n    _secureEstablished = false;\n    _securePending = true;\n    _newSessionPending;\n    _controlReleased;\n    secureConnecting = false;\n    _SNICallback;\n    servername;\n    alpnProtocol;\n    authorized = false;\n    authorizationError;\n\n    encrypted = true;\n\n    exportKeyingMaterial() {\n      throw Error(\"Not implented in Bun yet\");\n    }\n    setMaxSendFragment() {\n      throw Error(\"Not implented in Bun yet\");\n    }\n    setServername() {\n      throw Error(\"Not implented in Bun yet\");\n    }\n    setSession() {\n      throw Error(\"Not implented in Bun yet\");\n    }\n    getPeerCertificate() {\n      throw Error(\"Not implented in Bun yet\");\n    }\n    getCertificate() {\n      throw Error(\"Not implented in Bun yet\");\n    }\n    getPeerX509Certificate() {\n      throw Error(\"Not implented in Bun yet\");\n    }\n    getX509Certificate() {\n      throw Error(\"Not implented in Bun yet\");\n    }\n\n    [buntls](port, host) {\n      var { servername } = this;\n      if (servername) {\n        return {\n          serverName: typeof servername === \"string\" ? servername : host,\n          ...this.#secureContext,\n        };\n      }\n\n      return true;\n    }\n  },\n);\n\nclass Server extends NetServer {\n  key;\n  cert;\n  ca;\n  passphrase;\n  secureOptions;\n  _rejectUnauthorized;\n  _requestCert;\n  servername;\n\n  constructor(options, secureConnectionListener) {\n    super(options, secureConnectionListener);\n    this.setSecureContext(options);\n  }\n  emit(event, args) {\n    super.emit(event, args);\n\n    if (event === \"connection\") {\n      // grabs secureConnect to emit secureConnection\n      args.once(\"secureConnect\", () => {\n        super.emit(\"secureConnection\", args);\n      });\n    }\n  }\n  setSecureContext(options) {\n    if (options instanceof InternalSecureContext) {\n      options = options.context;\n    }\n    if (options) {\n      let key = options.key;\n      if (key) {\n        if (!isValidTLSArray(key)) {\n          throw new TypeError(\n            \"key argument must be an string, Buffer, TypedArray, BunFile or an array containing string, Buffer, TypedArray or BunFile\",\n          );\n        }\n        this.key = key;\n      }\n      let cert = options.cert;\n      if (cert) {\n        if (!isValidTLSArray(cert)) {\n          throw new TypeError(\n            \"cert argument must be an string, Buffer, TypedArray, BunFile or an array containing string, Buffer, TypedArray or BunFile\",\n          );\n        }\n        this.cert = cert;\n      }\n\n      let ca = options.ca;\n      if (ca) {\n        if (!isValidTLSArray(ca)) {\n          throw new TypeError(\n            \"ca argument must be an string, Buffer, TypedArray, BunFile or an array containing string, Buffer, TypedArray or BunFile\",\n          );\n        }\n        this.ca = ca;\n      }\n\n      let passphrase = options.passphrase;\n      if (passphrase && typeof passphrase !== \"string\") {\n        throw new TypeError(\"passphrase argument must be an string\");\n      }\n      this.passphrase = passphrase;\n\n      let servername = options.servername;\n      if (servername && typeof servername !== \"string\") {\n        throw new TypeError(\"servername argument must be an string\");\n      }\n      this.servername = servername;\n\n      let secureOptions = options.secureOptions || 0;\n      if (secureOptions && typeof secureOptions !== \"number\") {\n        throw new TypeError(\"secureOptions argument must be an number\");\n      }\n      this.secureOptions = secureOptions;\n\n      const requestCert = options.requestCert || false;\n\n      if (requestCert) this._requestCert = requestCert;\n      else this._requestCert = undefined;\n\n      const rejectUnauthorized = options.rejectUnauthorized || false;\n\n      if (rejectUnauthorized) {\n        this._rejectUnauthorized = rejectUnauthorized;\n      } else this._rejectUnauthorized = undefined;\n    }\n  }\n\n  getTicketKeys() {\n    throw Error(\"Not implented in Bun yet\");\n  }\n\n  setTicketKeys() {\n    throw Error(\"Not implented in Bun yet\");\n  }\n\n  [buntls](port, host, isClient) {\n    return [\n      {\n        serverName: this.servername || host || \"localhost\",\n        key: this.key,\n        cert: this.cert,\n        ca: this.ca,\n        passphrase: this.passphrase,\n        secureOptions: this.secureOptions,\n        // Client always is NONE on set_verify\n        rejectUnauthorized: isClient ? false : this._rejectUnauthorized,\n        requestCert: isClient ? false : this._requestCert,\n      },\n      SocketClass,\n    ];\n  }\n}\n\nfunction createServer(options, connectionListener) {\n  return new Server(options, connectionListener);\n}\nexport const CLIENT_RENEG_LIMIT = 3,\n  CLIENT_RENEG_WINDOW = 600,\n  DEFAULT_ECDH_CURVE = \"auto\",\n  // https://github.com/Jarred-Sumner/uSockets/blob/fafc241e8664243fc0c51d69684d5d02b9805134/src/crypto/openssl.c#L519-L523\n  DEFAULT_CIPHERS =\n    \"DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256\",\n  DEFAULT_MIN_VERSION = \"TLSv1.2\",\n  DEFAULT_MAX_VERSION = \"TLSv1.3\",\n  createConnection = (port, host, connectListener) => {\n    if (typeof port === \"object\") {\n      // port is option pass Socket options and let connect handle connection options\n      return new TLSSocket(port).connect(port, host, connectListener);\n    }\n    // port is path or host, let connect handle this\n    return new TLSSocket().connect(port, host, connectListener);\n  },\n  connect = createConnection;\n\nvar exports = {\n  createSecureContext,\n  parseCertString,\n\n  getCiphers() {\n    return DEFAULT_CIPHERS.split(\":\");\n  },\n\n  getCurves() {\n    return;\n  },\n\n  convertALPNProtocols(protocols, out) {},\n  TLSSocket,\n  SecureContext,\n  CLIENT_RENEG_LIMIT,\n  CLIENT_RENEG_WINDOW,\n  DEFAULT_ECDH_CURVE,\n  DEFAULT_CIPHERS,\n  DEFAULT_MIN_VERSION,\n  DEFAULT_MAX_VERSION,\n  [Symbol.for(\"CommonJS\")]: 0,\n  connect,\n  createConnection,\n  Server,\n  createServer,\n};\n\nexport default exports;\n\nexport { createSecureContext, parseCertString, TLSSocket, SecureContext };\n"
  ],
  "mappings": "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",
  "debugId": "EAD291BBB527196864756e2164756e21",
  "names": []
}