pub const TCCState = opaque {};
pub const TCCErrorFunc = ?*const fn (?*anyopaque, [*c]const u8) callconv(.C) void;
pub extern fn tcc_new() ?*TCCState;
pub extern fn tcc_delete(s: *TCCState) void;
pub extern fn tcc_set_lib_path(s: *TCCState, path: [*c]const u8) void;
pub extern fn tcc_set_error_func(s: *TCCState, error_opaque: ?*anyopaque, error_func: TCCErrorFunc) void;
pub extern fn tcc_get_error_func(s: *TCCState) TCCErrorFunc;
pub extern fn tcc_get_error_opaque(s: *TCCState) ?*anyopaque;
pub extern fn tcc_set_options(s: *TCCState, str: [*c]const u8) void;
pub extern fn tcc_add_include_path(s: *TCCState, pathname: [*c]const u8) c_int;
pub extern fn tcc_add_sysinclude_path(s: *TCCState, pathname: [*c]const u8) c_int;
pub extern fn tcc_define_symbol(s: *TCCState, sym: [*c]const u8, value: [*c]const u8) void;
pub extern fn tcc_undefine_symbol(s: *TCCState, sym: [*c]const u8) void;
pub extern fn tcc_add_file(s: *TCCState, filename: [*c]const u8) c_int;
pub extern fn tcc_compile_string(s: *TCCState, buf: [*c]const u8) c_int;
pub extern fn tcc_set_output_type(s: *TCCState, output_type: c_int) c_int;
pub extern fn tcc_add_library_path(s: *TCCState, pathname: [*c]const u8) c_int;
pub extern fn tcc_add_library(s: *TCCState, libraryname: [*c]const u8) c_int;
pub extern fn tcc_add_symbol(s: *TCCState, name: [*:0]const u8, val: *const anyopaque) c_int;
pub extern fn tcc_output_file(s: *TCCState, filename: [*c]const u8) c_int;
pub extern fn tcc_run(s: *TCCState, argc: c_int, argv: [*c][*c]u8) c_int;
pub extern fn tcc_relocate(s1: *TCCState, ptr: ?*anyopaque) c_int;
pub extern fn tcc_get_symbol(s: *TCCState, name: [*c]const u8) ?*anyopaque;
pub extern fn tcc_list_symbols(s: *TCCState, ctx: ?*anyopaque, symbol_cb: ?*const fn (?*anyopaque, [*c]const u8, ?*const anyopaque) callconv(.C) void) void;
pub const TCC_OUTPUT_MEMORY = @as(c_int, 1);
pub const TCC_OUTPUT_EXE = @as(c_int, 2);
pub const TCC_OUTPUT_DLL = @as(c_int, 3);
pub const TCC_OUTPUT_OBJ = @as(c_int, 4);
pub const TCC_OUTPUT_PREPROCESS = @as(c_int, 5);
pub const TCC_RELOCATE_AUTO = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 1));
