// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Bun.build Bun.write(BuildArtifact) 1`] = `
"var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// test/bundler/fixtures/trivial/fn.js
var exports_fn = {};
__export(exports_fn, {
  fn: () => fn
});
function fn(a) {
  return a + 42;
}
var init_fn = __esm(() => {
});

// test/bundler/fixtures/trivial/index.js
var NS = Promise.resolve().then(() => (init_fn(), exports_fn));
NS.then(({ fn: fn2 }) => {
  console.log(fn2(42));
});
"
`;

exports[`Bun.build outdir + reading out blobs works 1`] = `
"var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// test/bundler/fixtures/trivial/fn.js
var exports_fn = {};
__export(exports_fn, {
  fn: () => fn
});
function fn(a) {
  return a + 42;
}
var init_fn = __esm(() => {
});

// test/bundler/fixtures/trivial/index.js
var NS = Promise.resolve().then(() => (init_fn(), exports_fn));
NS.then(({ fn: fn2 }) => {
  console.log(fn2(42));
});
"
`;

exports[`Bun.build BuildArtifact properties: hash 1`] = `"cv02d0ez"`;

exports[`Bun.build BuildArtifact properties + entry.naming: hash 1`] = `"3v155a0d"`;

exports[`Bun.build BuildArtifact properties sourcemap: hash index.js 1`] = `"cv02d0ez"`;

exports[`Bun.build BuildArtifact properties sourcemap: hash index.js.map 1`] = `"00000000"`;

exports[`Bun.build new Response(BuildArtifact) sets content type: response text 1`] = `
"var __defProp = Object.defineProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// test/bundler/fixtures/trivial/fn.js
var exports_fn = {};
__export(exports_fn, {
  fn: () => fn
});
function fn(a) {
  return a + 42;
}
var init_fn = __esm(() => {
});

// test/bundler/fixtures/trivial/index.js
var NS = Promise.resolve().then(() => (init_fn(), exports_fn));
NS.then(({ fn: fn2 }) => {
  console.log(fn2(42));
});
"
`;
